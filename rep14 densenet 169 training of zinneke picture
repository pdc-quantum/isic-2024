{"metadata":{"colab":{"provenance":[{"file_id":"1SKuKE8T6z3a391recD_fNpPwrFaBFvcq","timestamp":1724532555414},{"file_id":"1NQUaub4W12nCMg5n-WsacO0D77dvXckv","timestamp":1724381970722},{"file_id":"1kgShMso2QgXf-5MhrHxSN2Jx86BlLK7v","timestamp":1724310293577},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/zinneke-picture-7dd8d4ea-01ff-419b-b2cd-d867d8d1d03f.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240811/auto/storage/goog4_request&X-Goog-Date=20240811T064721Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=53befc0568abf4b053465fdd0f09102daab4f43023a458d24b821ddc887dc7d96d0335a3c9c20f9d0c6c2031b8720070884b6a05c8045fd2df0540bcc40fc87453955bb665195119d289cea97cfc306e02f7ae391235b245530d8ee691658eb716c8c0cfbcdae32a84e99fa5f6b82a1c2e5f40e54df5c16ecb63f70411d9f1d0347caf26a03544b91afb9879e0b73c33addf2fe74dae0cfac503918408794cfa28769517bb4a1ca0a5b1fcd116e86318f3dcecbe370183407837a4dec0de31985e2fe2a5e094ce42e3d69ae415c2386d70ec21740b38203255ae8eb51f073b6698e4bec74c115ca4e8d6c0bee2432eec7697ff7675aa1833afbf0434e8ea1ec8","timestamp":1723358850760},{"file_id":"1G-FZ6NdOU-xVp7o4AQfrDByh60FsPqXU","timestamp":1722374812038},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/isic-2024-pytorch-training-effnet-b2-42f84861-6799-446a-b569-822d6e5a4149.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240726/auto/storage/goog4_request&X-Goog-Date=20240726T203743Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=02dda529bc77d43d996e66896c3bc2cfefad4ad73aee9b39d330ae1aa92c61fb00c0d33a1c469e59670d91594ef9acc31d55a18ede693a15a70633449660685bc0a86b7fbffd3978b9ed754f6a3a54e254ff21f501e3670ab298c1c18ddfc13a3640f44c340db11518a456632837fa4f37bf6bfa44111e0efbec927105fd5396d35965571fb7c83b6c0ddd79ac0ee389d058f93fac19e1f7961430df12083c932240b96caa0032a3f45ef8966b75731821ebb94b92c776b6ccc0af82d32fee00dcc9abe37e7aa23b73117d8db04606de97e89684585fca6c932d9d550a5eca820b4f15459bea44c9f58d95a603b608c47d57ac611289d4c372fdd4e384e3bad4","timestamp":1722026331852}],"machine_shape":"hm","gpuType":"T4"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":63056,"databundleVersionId":9094797,"sourceType":"competition"},{"sourceId":8805041,"sourceType":"datasetVersion","datasetId":5295511},{"sourceId":8805074,"sourceType":"datasetVersion","datasetId":5295526},{"sourceId":8805104,"sourceType":"datasetVersion","datasetId":5295545},{"sourceId":9118579,"sourceType":"datasetVersion","datasetId":5504311},{"sourceId":9144856,"sourceType":"datasetVersion","datasetId":5523470},{"sourceId":9146933,"sourceType":"datasetVersion","datasetId":5525007},{"sourceId":3732,"sourceType":"modelInstanceVersion","modelInstanceId":2659,"modelId":312},{"sourceId":92232,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":77322,"modelId":101954}],"dockerImageVersionId":30747,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":4653.084709,"end_time":"2024-08-08T06:30:12.536858","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-08-08T05:12:39.452149","version":"2.5.0"},"accelerator":"GPU"},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"ilRhTTgaX4OE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724622055749,"user_tz":-120,"elapsed":19056,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"6916cefd-4102-4e81-95e7-df4d7e5fe003"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["# for colab\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"5hzXdHCFPrFV","executionInfo":{"status":"ok","timestamp":1724622055749,"user_tz":-120,"elapsed":9,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"outputs":[],"source":["#path_isic_data = '/content/drive/MyDrive/Data/ISIC-2018/dup1-output-zinneke-picture-train-d169/'\n","path_isic_data = '/content/drive/MyDrive/Data/ISIC-2018/rep14-output-zinneke-picture-train-d169/'"]},{"source":["\n","# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n","# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","\n","import os\n","import sys\n","from tempfile import NamedTemporaryFile\n","from urllib.request import urlopen\n","from urllib.parse import unquote, urlparse\n","from urllib.error import HTTPError\n","from zipfile import ZipFile\n","import tarfile\n","import shutil\n","\n","CHUNK_SIZE = 40960\n","DATA_SOURCE_MAPPING = 'isic-2024-challenge:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-competitions-data%2Fkaggle-v2%2F63056%2F9094797%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240825%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240825T210322Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Dc222f01067ab8f1458503908d115059cedcd38e1e40ab6b014683f0f059cc2d16baa8d61779355ff2ffe960bf24dab9d60ceb1089bd4489a51d1c91daeff46e4d7fb1a0237f750cef211fad09a2e525af3529cecf950d78dfbda0e9bf78ad55f355e1eef7ef64645950d102cc3a9ced9138a66bfdc8b60545f1e92c681122c338339fbcf41a19ebdb239f9b8cbe92d8e8d828cdad67eeadcda576738030edaeb0e3764a1ab54db4b9d50ff11b8d181a475b28b08ac7fc29d117a994e1a6399441bb40247671275ff5354a16011b3a3d8d7d9f5413942635ee73d9c3f562005380596d1aad5b28654a6bc198d2c4e8150d5cb25ab864fa0776139ea51c3414542,isic-2018-jpg-256x256-resized:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F5295511%2F8805041%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240825%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240825T210323Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D0c2bb3d99a51dce4b19384dba5101898f3974428045eb4ab7e193df3bdb1582a100ceea63dca3b401bd2931b61a316f685ce680461358dd17808f4b0f7a8678b43880c9d1051f1d3cf11da4f95882154d34b35f90606cb442816e7401b277c8b7e46deafb5c95fe4a8e7852c0beafdaf3d223dbcd6e82acc00063c10e69b8a72f224df2a350a47c530f17077aa6a1f424995bdd658786eef59f9221bc3b7e4ab5807aa4a70d7d3f270b9293c13388f15acae3f5dca4f370cc134462362ba8166ffe0081efd80ad5a138f442a02121872e21af3f2c2d333ec0d6f27354df546fda3f7b16869f53f76be54f4d198f26a126383365609f53656aec1694d0241e74b,isic-2019-jpg-256x256-resized:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F5295526%2F8805074%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240825%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240825T210323Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D897f25de2136d34e476949ee483e8a0f96f9ac9aa71b46f0dbf9d1b9c46376bd303c818a0a2ed81e0341f14d32844062bf757172aa7185c1abe20e7c1133d01058f6f5778bfddd0613e527a49a0dcf6c9aeea75d1ea5ce0c1aabd260fa93cff36fcee84da33f0148401146a39d993e49ceeae523a629823be49d16118826c07edde64a9f5d79dce6d3cb9cc17bace5a4b59d75059521c4940422cdf48c306941bd694c8b5ed13aec7304e9401c6e9a0d2607a67d657c9c5b1f0bf206b67bb6a7ceae2f68f604067b89c843537a7c01f830811744344f0be76415debe4d3136ad6c620624253a2c6cf1d377029a406477be1d803a8dcff692b06f685ebd525d12,isic-2020-jpg-256x256-resized:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F5295545%2F8805104%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240825%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240825T210323Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D1bc7bb7d67ee44c0a2a7399e70fc1f145caaee7d32fcc3c90462dc49f3c9e77f5d955930892adfce0ebb306691725d57276968d0b20e71c480f238843de911dd5e7e74b4e69c54f67b812cd1a24bfc729ccff385b5612dfeefcb0d814c50bae65f78f4427abfff68adfc604971ffeef3f686eb13c5aace9a0b4072eb0aca83e439549f09c5f391ce8e05ac1ca0dfc4b65cb5b2939cb618de59ccbe647497068d832056fd680a66a0dc031d58a4c3123579240384711da4da9946d8ca4c18e49d76d516e8ed0e755edde24ad249dbafaf76411852105656eaa0fbb4a0d6be7465d9b6667d70a3a826587a2589d1e909966c9f55590fa5fbd25dcde7ffe897f73b,tf-efficientnet/pytorch/tf-efficientnet-b3/1:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-models-data%2F2659%2F3732%2Fbundle%2Farchive.tar.gz%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240825%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240825T210323Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Dab707ee8de76a9569353c180e105d152bf74d477131cb9bfd721bd6f6cacfb2e7d6929da17422d7199741c1c55bb9dd0c83e63aba638133cd47ac9c0ef90cf79075da410b62b6297122a29538396b4fe975c6950c794d0f64bc3ee5baff17ea3a508e1827737738ff45344000a4ea160b958c948dc3ce4d52c6d0c767664be787ea44cb7313e73099a8ac7861ee4f9e1a986f77c875cf6a95866fa51e778e147ae1db6cebe03237ed261c3d5d8d633b12c767d35aa088d94f2c82ae1954450a16c9ee8fe01a6b001bd485ccddc5723891acc7cde9a83cd878c271f05279cae7651431a22a8d37feedcacc6cab7b669f92fb49e3e3068b5bb209cbe99aad41b16'\n","\n","KAGGLE_INPUT_PATH='/kaggle/input'\n","KAGGLE_WORKING_PATH='/kaggle/working'\n","KAGGLE_SYMLINK='kaggle'\n","\n","!umount /kaggle/input/ 2> /dev/null\n","shutil.rmtree('/kaggle/input', ignore_errors=True)\n","os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n","os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n","\n","try:\n","  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","try:\n","  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","\n","for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n","    directory, download_url_encoded = data_source_mapping.split(':')\n","    download_url = unquote(download_url_encoded)\n","    filename = urlparse(download_url).path\n","    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n","    try:\n","        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n","            total_length = fileres.headers['content-length']\n","            print(f'Downloading {directory}, {total_length} bytes compressed')\n","            dl = 0\n","            data = fileres.read(CHUNK_SIZE)\n","            while len(data) > 0:\n","                dl += len(data)\n","                tfile.write(data)\n","                done = int(50 * dl / int(total_length))\n","                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n","                sys.stdout.flush()\n","                data = fileres.read(CHUNK_SIZE)\n","            if filename.endswith('.zip'):\n","              with ZipFile(tfile) as zfile:\n","                zfile.extractall(destination_path)\n","            else:\n","              with tarfile.open(tfile.name) as tarfile:\n","                tarfile.extractall(destination_path)\n","            print(f'\\nDownloaded and uncompressed: {directory}')\n","    except HTTPError as e:\n","        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n","        continue\n","    except OSError as e:\n","        print(f'Failed to load {download_url} to path {destination_path}')\n","        continue\n","\n","print('Data source import complete.')\n"],"metadata":{"id":"YPX3HHYyWcyI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724622257322,"user_tz":-120,"elapsed":201580,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"d8eac02a-e92c-4c75-b6fe-177b4fddd31d"},"cell_type":"code","outputs":[{"output_type":"stream","name":"stdout","text":["Downloading isic-2024-challenge, 2148525604 bytes compressed\n","[==================================================] 2148525604 bytes downloaded\n","Downloaded and uncompressed: isic-2024-challenge\n","Downloading isic-2018-jpg-256x256-resized, 137798195 bytes compressed\n","[==================================================] 137798195 bytes downloaded\n","Downloaded and uncompressed: isic-2018-jpg-256x256-resized\n","Downloading isic-2019-jpg-256x256-resized, 466726618 bytes compressed\n","[==================================================] 466726618 bytes downloaded\n","Downloaded and uncompressed: isic-2019-jpg-256x256-resized\n","Downloading isic-2020-jpg-256x256-resized, 624178238 bytes compressed\n","[==================================================] 624178238 bytes downloaded\n","Downloaded and uncompressed: isic-2020-jpg-256x256-resized\n","Downloading tf-efficientnet/pytorch/tf-efficientnet-b3/1, 45614007 bytes compressed\n","[==================================================] 45614007 bytes downloaded\n","Downloaded and uncompressed: tf-efficientnet/pytorch/tf-efficientnet-b3/1\n","Data source import complete.\n"]}],"execution_count":3},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Note from the previous coder</h1></span>\n","This note book is forked from [here](https://www.kaggle.com/code/motono0223/isic-pytorch-training-baseline-image-only)\n","\n","Credit:\n","* https://www.kaggle.com/code/samu2505/isic-pytorchmodel-training\n","    * This notebook added images from past ISIC datasets and I used it to enlarge the size of positive cases\n","    \n","Future Improvements:\n","* I used EffNet_b3, and maybe other model could have better performance.\n","* The size of dataset is limited due to the computation power. if you have better machine, you could enlarge the dataset of training.\n","* Parameter finetuning (the epoch = 20 now).\n","* I only one fold out of five, which can be changed.\n","\n","Notebooks:\n","- Training notebook (This Notebook):\n","- [Inference notebook](https://www.kaggle.com/code/hugowjd/isic-2024-pytorch-inference-effnet-b2/)"],"metadata":{"id":"7nD0BWv5w4wX","papermill":{"duration":0.023962,"end_time":"2024-08-08T05:12:42.1117","exception":false,"start_time":"2024-08-08T05:12:42.087738","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":["# Code origin\n","https://www.google.com/url?q=https%3A%2F%2Fwww.kaggle.com%2Fcode%2Fmotono0223%2Fisic-pytorch-training-baseline-image-only\n","\n","Main modification: generate the CVS my-mix-image-small.csv and my-mix-image.csv that will be used for further research."],"metadata":{"papermill":{"duration":0.022599,"end_time":"2024-08-08T05:12:42.159021","exception":false,"start_time":"2024-08-08T05:12:42.136422","status":"completed"},"tags":[],"id":"H0UfPbdDMQwX"}},{"cell_type":"markdown","source":["## <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 50px 50px;\">Import Required Libraries</h1></span>"],"metadata":{"id":"YtCrXA2lw4wY","papermill":{"duration":0.022687,"end_time":"2024-08-08T05:25:13.740352","exception":false,"start_time":"2024-08-08T05:25:13.717665","status":"completed"},"tags":[]}},{"cell_type":"code","source":["!pip install timm"],"metadata":{"id":"uCG-wq4HyZFn","papermill":{"duration":12.051659,"end_time":"2024-08-08T05:25:39.549708","exception":false,"start_time":"2024-08-08T05:25:27.498049","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:13:47.600581Z","iopub.execute_input":"2024-08-10T08:13:47.600994Z","iopub.status.idle":"2024-08-10T08:14:24.003603Z","shell.execute_reply.started":"2024-08-10T08:13:47.600962Z","shell.execute_reply":"2024-08-10T08:14:24.002068Z"},"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724622309013,"user_tz":-120,"elapsed":51709,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"1d53191d-5a2a-4ede-b433-9029b1f89c90"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting timm\n","  Downloading timm-1.0.9-py3-none-any.whl.metadata (42 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/42.4 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.4/42.4 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from timm) (2.3.1+cu121)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (from timm) (0.18.1+cu121)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from timm) (6.0.2)\n","Requirement already satisfied: huggingface_hub in /usr/local/lib/python3.10/dist-packages (from timm) (0.23.5)\n","Requirement already satisfied: safetensors in /usr/local/lib/python3.10/dist-packages (from timm) (0.4.4)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (3.15.4)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (2024.6.1)\n","Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (24.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (2.32.3)\n","Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (4.66.5)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (4.12.2)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->timm) (1.13.2)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->timm) (3.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (3.1.4)\n","Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch->timm)\n","  Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-runtime-cu12==12.1.105 (from torch->timm)\n","  Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.1.105 (from torch->timm)\n","  Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cudnn-cu12==8.9.2.26 (from torch->timm)\n","  Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cublas-cu12==12.1.3.1 (from torch->timm)\n","  Using cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cufft-cu12==11.0.2.54 (from torch->timm)\n","  Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-curand-cu12==10.3.2.106 (from torch->timm)\n","  Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cusolver-cu12==11.4.5.107 (from torch->timm)\n","  Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cusparse-cu12==12.1.0.106 (from torch->timm)\n","  Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-nccl-cu12==2.20.5 (from torch->timm)\n","  Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl.metadata (1.8 kB)\n","Collecting nvidia-nvtx-cu12==12.1.105 (from torch->timm)\n","  Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.7 kB)\n","Requirement already satisfied: triton==2.3.1 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (2.3.1)\n","Collecting nvidia-nvjitlink-cu12 (from nvidia-cusolver-cu12==11.4.5.107->torch->timm)\n","  Using cached nvidia_nvjitlink_cu12-12.6.20-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torchvision->timm) (1.26.4)\n","Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision->timm) (9.4.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->timm) (2.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub->timm) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub->timm) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub->timm) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub->timm) (2024.7.4)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->timm) (1.3.0)\n","Downloading timm-1.0.9-py3-none-any.whl (2.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.3/2.3 MB\u001b[0m \u001b[31m30.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl (410.6 MB)\n","Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n","Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n","Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n","Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n","Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl (121.6 MB)\n","Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl (56.5 MB)\n","Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl (124.2 MB)\n","Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl (196.0 MB)\n","Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl (176.2 MB)\n","Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (99 kB)\n","Using cached nvidia_nvjitlink_cu12-12.6.20-py3-none-manylinux2014_x86_64.whl (19.7 MB)\n","Installing collected packages: nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12, timm\n","Successfully installed nvidia-cublas-cu12-12.1.3.1 nvidia-cuda-cupti-cu12-12.1.105 nvidia-cuda-nvrtc-cu12-12.1.105 nvidia-cuda-runtime-cu12-12.1.105 nvidia-cudnn-cu12-8.9.2.26 nvidia-cufft-cu12-11.0.2.54 nvidia-curand-cu12-10.3.2.106 nvidia-cusolver-cu12-11.4.5.107 nvidia-cusparse-cu12-12.1.0.106 nvidia-nccl-cu12-2.20.5 nvidia-nvjitlink-cu12-12.6.20 nvidia-nvtx-cu12-12.1.105 timm-1.0.9\n"]}]},{"cell_type":"code","source":["import os\n","import gc\n","import cv2\n","import math\n","import copy\n","import time\n","import random\n","import glob\n","from pathlib import Path\n","import h5py\n","from PIL import Image\n","from io import BytesIO\n","\n","# For data manipulation\n","import numpy as np\n","import pandas as pd\n","\n","# Pytorch Imports\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","from torch.optim import lr_scheduler\n","from torch.utils.data import Dataset, DataLoader\n","from torch.cuda import amp\n","import torchvision\n","#from torcheval.metrics.functional import binary_auroc\n","\n","# Utils\n","import joblib\n","from tqdm import tqdm\n","from collections import defaultdict\n","\n","# Sklearn Imports\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.model_selection import StratifiedKFold, StratifiedGroupKFold, train_test_split\n","from sklearn.metrics import auc, roc_curve\n","\n","# For Image Models\n","import timm\n","\n","# Albumentations for augmentations\n","import albumentations as A\n","from albumentations.pytorch import ToTensorV2\n","\n","# For colored terminal text\n","# from colorama import Fore, Back, Style\n","# b_ = Fore.BLUE\n","# sr_ = Style.RESET_ALL\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","# For descriptive error messages\n","os.environ['CUDA_LAUNCH_BLOCKING'] = \"1\"\n","\n","# Plot package\n","import PIL\n","\n","from matplotlib import pyplot as plt"],"metadata":{"id":"kTaXjDdMw4wZ","papermill":{"duration":8.951626,"end_time":"2024-08-08T05:25:48.525949","exception":false,"start_time":"2024-08-08T05:25:39.574323","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:24.005893Z","iopub.execute_input":"2024-08-10T08:14:24.006449Z","iopub.status.idle":"2024-08-10T08:14:32.739088Z","shell.execute_reply.started":"2024-08-10T08:14:24.006399Z","shell.execute_reply":"2024-08-10T08:14:32.737791Z"},"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622318364,"user_tz":-120,"elapsed":9355,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Configuration</h1></span>"],"metadata":{"id":"-o8DZUCPw4wZ","papermill":{"duration":0.023748,"end_time":"2024-08-08T05:25:48.574482","exception":false,"start_time":"2024-08-08T05:25:48.550734","status":"completed"},"tags":[]}},{"cell_type":"code","source":["CONFIG = {\n","    \"seed\": 42,\n","    \"epochs\": 10,\n","    \"img_size\": 224, # for b0 # 288, # was 384,\n","    #\"model_name\": \"tf_efficientnet_b3_ns\",\n","    \"model_name\": \"densenet169.tv_in1k\",\n","    #\"checkpoint_path\" : \"/kaggle/input/tf-efficientnet/pytorch/tf-efficientnet-b3/1/tf_efficientnet_b3_aa-84b4657e.pth\",\n","    #\"checkpoint_path\" : \"/kaggle/input/pdc_efficientnet/pytorch/default/1/tf_efficientnet_b0_aa-827b6e33.pth\",\n","    \"train_batch_size\": 32,\n","    \"valid_batch_size\": 64,\n","    \"learning_rate\": 5e-5,\n","    \"scheduler\": 'CosineAnnealingLR',\n","    \"min_lr\": 5e-7,\n","    \"T_max\": 500,\n","    \"weight_decay\": 1e-6,\n","    \"fold\" : 0,\n","    \"n_fold\": 5,\n","    \"n_accumulate\": 1,\n","    \"replicate_pos\" : 14,\n","    \"target_ratio\" : 4,\n","    \"device\": torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\"),\n","}"],"metadata":{"id":"qpYc_FJuw4wZ","papermill":{"duration":0.111643,"end_time":"2024-08-08T05:25:48.751479","exception":false,"start_time":"2024-08-08T05:25:48.639836","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.74065Z","iopub.execute_input":"2024-08-10T08:14:32.741317Z","iopub.status.idle":"2024-08-10T08:14:32.748966Z","shell.execute_reply.started":"2024-08-10T08:14:32.741281Z","shell.execute_reply":"2024-08-10T08:14:32.747604Z"},"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622318364,"user_tz":-120,"elapsed":22,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["CONFIG['device']"],"metadata":{"id":"mvWLHjo5w4wa","papermill":{"duration":0.032987,"end_time":"2024-08-08T05:25:48.808791","exception":false,"start_time":"2024-08-08T05:25:48.775804","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.752401Z","iopub.execute_input":"2024-08-10T08:14:32.752802Z","iopub.status.idle":"2024-08-10T08:14:32.769579Z","shell.execute_reply.started":"2024-08-10T08:14:32.752765Z","shell.execute_reply":"2024-08-10T08:14:32.768053Z"},"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724622318364,"user_tz":-120,"elapsed":22,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"33f815e5-825b-49e3-8922-8c2812f8ecc1"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["device(type='cuda', index=0)"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 50px 50px;\">Set Seed for Reproducibility</h2></span>"],"metadata":{"id":"h_SBRfZUw4wa","papermill":{"duration":0.024232,"end_time":"2024-08-08T05:25:48.857606","exception":false,"start_time":"2024-08-08T05:25:48.833374","status":"completed"},"tags":[]}},{"cell_type":"code","source":["def set_seed(seed=42):\n","    '''Sets the seed of the entire notebook so results are the same every time we run.\n","    This is for REPRODUCIBILITY.'''\n","    np.random.seed(seed)\n","    if torch.cuda.is_available():\n","        torch.cuda.manual_seed(seed)\n","        torch.cuda.manual_seed_all(seed)\n","        torch.backends.cudnn.deterministic = False\n","        torch.backends.cudnn.benchmark = True\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    print(f\"Seeding done ...\")\n","\n","def flush():\n","    gc.collect()\n","    if torch.cuda.is_available():\n","        torch.cuda.empty_cache()\n","        torch.cuda.reset_peak_memory_stats()\n","set_seed(CONFIG['seed'])"],"metadata":{"id":"AYLWOhWOw4wa","papermill":{"duration":0.036861,"end_time":"2024-08-08T05:25:48.918576","exception":false,"start_time":"2024-08-08T05:25:48.881715","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.771413Z","iopub.execute_input":"2024-08-10T08:14:32.77187Z","iopub.status.idle":"2024-08-10T08:14:32.784364Z","shell.execute_reply.started":"2024-08-10T08:14:32.771797Z","shell.execute_reply":"2024-08-10T08:14:32.782879Z"},"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724622318365,"user_tz":-120,"elapsed":21,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"2e0003e2-afd2-470d-f660-1902bef93b19"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Seeding done ...\n"]}]},{"cell_type":"code","source":["ROOT_DIR = \"/kaggle/input/isic-2024-challenge\"\n","TRAIN_DIR = f'{ROOT_DIR}/train-image/image'\n","TEST_DIR = f'{ROOT_DIR}/test-image.hdf5/image'"],"metadata":{"id":"8PVUViMKw4wb","papermill":{"duration":0.030454,"end_time":"2024-08-08T05:25:48.973101","exception":false,"start_time":"2024-08-08T05:25:48.942647","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.78596Z","iopub.execute_input":"2024-08-10T08:14:32.786652Z","iopub.status.idle":"2024-08-10T08:14:32.800992Z","shell.execute_reply.started":"2024-08-10T08:14:32.786604Z","shell.execute_reply":"2024-08-10T08:14:32.799684Z"},"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622318365,"user_tz":-120,"elapsed":19,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["TEST_CSV = f'{ROOT_DIR}/test-metadata.csv'\n","TEST_HDF = f'{ROOT_DIR}/test-image.hdf5'\n","SAMPLE = f'{ROOT_DIR}/sample_submission.csv'"],"metadata":{"papermill":{"duration":0.030768,"end_time":"2024-08-08T05:25:49.028068","exception":false,"start_time":"2024-08-08T05:25:48.9973","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.802786Z","iopub.execute_input":"2024-08-10T08:14:32.803317Z","iopub.status.idle":"2024-08-10T08:14:32.813981Z","shell.execute_reply.started":"2024-08-10T08:14:32.803272Z","shell.execute_reply":"2024-08-10T08:14:32.812716Z"},"trusted":true,"id":"j0e1qEAKMQwb","executionInfo":{"status":"ok","timestamp":1724622318365,"user_tz":-120,"elapsed":19,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["def get_train_file_path(image_id):\n","    return f\"{TRAIN_DIR}/{image_id}.jpg\""],"metadata":{"id":"b4pt0IQKw4wb","papermill":{"duration":0.030276,"end_time":"2024-08-08T05:25:49.082535","exception":false,"start_time":"2024-08-08T05:25:49.052259","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.815577Z","iopub.execute_input":"2024-08-10T08:14:32.816013Z","iopub.status.idle":"2024-08-10T08:14:32.825882Z","shell.execute_reply.started":"2024-08-10T08:14:32.81598Z","shell.execute_reply":"2024-08-10T08:14:32.824605Z"},"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622318365,"user_tz":-120,"elapsed":18,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# not used\n","#def get_test_file_path(image_id):\n","    #return f\"{TEST_DIR}/{image_id}.jpg\""],"metadata":{"papermill":{"duration":0.031644,"end_time":"2024-08-08T05:25:49.138414","exception":false,"start_time":"2024-08-08T05:25:49.10677","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.827332Z","iopub.execute_input":"2024-08-10T08:14:32.827722Z","iopub.status.idle":"2024-08-10T08:14:32.837018Z","shell.execute_reply.started":"2024-08-10T08:14:32.827692Z","shell.execute_reply":"2024-08-10T08:14:32.835572Z"},"trusted":true,"id":"pLnZ_OduMQwb","executionInfo":{"status":"ok","timestamp":1724622318365,"user_tz":-120,"elapsed":18,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["# <h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Read the Data</h1>"],"metadata":{"id":"C6sfwVEJw4wb","papermill":{"duration":0.024653,"end_time":"2024-08-08T05:25:49.187255","exception":false,"start_time":"2024-08-08T05:25:49.162602","status":"completed"},"tags":[]}},{"cell_type":"code","source":["train_images = sorted(glob.glob(f\"{TRAIN_DIR}/*.jpg\"))"],"metadata":{"id":"CsRI71I9w4wb","papermill":{"duration":1.838038,"end_time":"2024-08-08T05:25:51.049596","exception":false,"start_time":"2024-08-08T05:25:49.211558","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622319672,"user_tz":-120,"elapsed":1325,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["#test_images = sorted(glob.glob(f\"{TEST_DIR}/*.jpg\"))"],"metadata":{"papermill":{"duration":0.031198,"end_time":"2024-08-08T05:25:51.105596","exception":false,"start_time":"2024-08-08T05:25:51.074398","status":"completed"},"tags":[],"trusted":true,"id":"gv9p3frlMQwc","executionInfo":{"status":"ok","timestamp":1724622319672,"user_tz":-120,"elapsed":6,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["def curate_data(df_in):\n","  df_out = df_in.reset_index(drop=True)\n","  df_out['file_path'] = df_out[\"isic_id\"].apply(get_image_path)\n","  df_out['exists'] = df_out['file_path'].apply(check_path)\n","  df_out = df_out[df_out['exists'] == True].reset_index()\n","  return df_out"],"metadata":{"id":"QcEeMTt9O2pn","executionInfo":{"status":"ok","timestamp":1724622319673,"user_tz":-120,"elapsed":5,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# Read past isic competition data\n","check_path = lambda p: os.path.exists(p)\n","\n","# 2020\n","DATA_PATH_2020 = Path(\"/kaggle/input/isic-2020-jpg-256x256-resized\")\n","get_image_path = lambda p: os.path.join(f'{str(DATA_PATH_2020/\"train-image/image\")}/{p}.jpg')\n","df_train_2020 = pd.read_csv(DATA_PATH_2020/\"train-metadata.csv\")\n","df_positive_2020 = curate_data(df_train_2020[df_train_2020[\"target\"] == 1].reset_index(drop=True))\n","df_negative_2020 = curate_data(df_train_2020[df_train_2020[\"target\"] == 0].reset_index(drop=True))\n","print(len(df_train_2020), len(df_positive_2020) ,len(df_train_2020)- len(df_positive_2020))\n","# 2019\n","DATA_PATH_2019 = Path(\"/kaggle/input/isic-2019-jpg-256x256-resized\")\n","get_image_path = lambda p: os.path.join(f'{str(DATA_PATH_2019/\"train-image/image\")}/{p}.jpg')\n","df_train_2019 = pd.read_csv(DATA_PATH_2019/\"train-metadata.csv\")\n","df_positive_2019 = curate_data(df_train_2019[df_train_2019[\"target\"] == 1].reset_index(drop=True))\n","df_negative_2019 = curate_data(df_train_2019[df_train_2019[\"target\"]==0].reset_index(drop=True))\n","print(len(df_train_2019), len(df_positive_2019) , len(df_negative_2019))\n","# 2018\n","DATA_PATH_2018 = Path(\"/kaggle/input/isic-2018-jpg-256x256-resized\")\n","get_image_path = lambda p: os.path.join(f'{str(DATA_PATH_2018/\"train-image/image\")}/{p}.jpg')\n","df_train_2018 = pd.read_csv(DATA_PATH_2018/\"train-metadata.csv\")\n","df_positive_2018 = curate_data(df_train_2018[df_train_2018[\"target\"] == 1].reset_index(drop=True))\n","df_negative_2018 = curate_data(df_train_2018[df_train_2018[\"target\"] == 0].reset_index(drop=True))\n","print(len(df_train_2018), len(df_positive_2018) ,len(df_train_2018)- len(df_positive_2018))"],"metadata":{"id":"-kBc1TkMw4wc","papermill":{"duration":9.34957,"end_time":"2024-08-08T05:26:00.48035","exception":false,"start_time":"2024-08-08T05:25:51.13078","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724622320370,"user_tz":-120,"elapsed":702,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"b2f141dd-cda7-4355-d9c8-263e007200a3"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["33126 584 32542\n","25331 4522 20809\n","8982 662 8320\n"]}]},{"cell_type":"code","source":["past_df_positive = pd.concat([df_positive_2018, df_positive_2019, df_positive_2020], axis=0)\n","\n","print(f'Number of positive cases: {past_df_positive.shape[0]}')"],"metadata":{"id":"_6d96Py1w4wc","papermill":{"duration":0.034312,"end_time":"2024-08-08T05:26:00.539436","exception":false,"start_time":"2024-08-08T05:26:00.505124","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724622320370,"user_tz":-120,"elapsed":4,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"8b1a13ba-9ded-476a-8d73-59ebfa561fab"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of positive cases: 5768\n"]}]},{"cell_type":"code","source":["past_df_negative = pd.concat([df_negative_2018, df_negative_2019, df_negative_2020], axis=0)\n","\n","print(f'Number of negative cases: {past_df_negative.shape[0]}')"],"metadata":{"papermill":{"duration":0.034312,"end_time":"2024-08-08T05:26:00.539436","exception":false,"start_time":"2024-08-08T05:26:00.505124","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724622320728,"user_tz":-120,"elapsed":360,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"f468e47b-89fb-4334-fef0-5d16bf838b8e","id":"F1jAriO4W4ns"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of negative cases: 60185\n"]}]},{"cell_type":"code","source":["int(14/2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TPDgkfnnd8R9","executionInfo":{"status":"ok","timestamp":1724622320728,"user_tz":-120,"elapsed":5,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"a342f891-1c7e-4703-a4ff-433a135afd7c"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["selected_cols = ['isic_id', 'target', 'file_path', 'patient_id']\n","\n","df_now = pd.read_csv(f\"{ROOT_DIR}/train-metadata.csv\")\n","print(\"        df.size, # of positive cases\")\n","print(\"original>\", df_now.shape[0], df_now.target.sum())\n","\n","# augment df\n","if CONFIG[\"replicate_pos\"] >= 2:\n","  df_now = pd.concat([df_now] * CONFIG[\"replicate_pos\"]).reset_index(drop=True)\n","\n","# Positive cases\n","df_positive = df_now[df_now[\"target\"] == 1].reset_index(drop=True)\n","df_positive['file_path'] = df_positive['isic_id'].apply(get_train_file_path)\n","df_positive = pd.concat([df_positive[selected_cols], past_df_positive[selected_cols]], axis = 0).reset_index(drop=True)\n","\n","# Negative cases\n","df_negative_now = df_now[df_now[\"target\"] == 0].reset_index(drop=True)\n","df_negative_now = df_negative_now.sample(frac=1).iloc[:df_positive.shape[0]*int(CONFIG[\"target_ratio\"]/2), :]\n","df_negative_now['file_path'] = df_negative_now['isic_id'].apply(get_train_file_path)\n","\n","df_negative_past = past_df_negative.sample(frac=1).iloc[:df_positive.shape[0]*int(CONFIG[\"target_ratio\"]/2), :]\n","df_negative_past['file_path'] = df_negative_now['isic_id'].apply(get_train_file_path)\n","\n","df_negative = pd.concat([df_negative_now[selected_cols], df_negative_past[selected_cols]], axis = 0).reset_index(drop=True)\n","df_negative = df_negative[df_negative[\"file_path\"].isin(train_images) ]\n","df = pd.concat([df_positive, df_negative]).reset_index(drop=True)\n","print(\"filtered>\", df.shape[0], df.target.sum())\n","\n","df.head(3)"],"metadata":{"id":"jis04ERxMH9A","papermill":{"duration":7.732103,"end_time":"2024-08-08T05:26:08.295596","exception":false,"start_time":"2024-08-08T05:26:00.563493","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1724622869025,"user_tz":-120,"elapsed":31274,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"190e43ed-4dce-46b0-e3fb-a1b0c09802b6"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["        df.size, # of positive cases\n","original> 401059 393\n","filtered> 33885 11270.0\n"]},{"output_type":"execute_result","data":{"text/plain":["        isic_id  target                                          file_path  \\\n","0  ISIC_0082829     1.0  /kaggle/input/isic-2024-challenge/train-image/...   \n","1  ISIC_0096034     1.0  /kaggle/input/isic-2024-challenge/train-image/...   \n","2  ISIC_0104229     1.0  /kaggle/input/isic-2024-challenge/train-image/...   \n","\n","   patient_id  \n","0  IP_3249371  \n","1  IP_6723298  \n","2  IP_9057861  "],"text/html":["\n","  <div id=\"df-81795ba5-2a0c-48d7-821a-408bc38ef49a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>isic_id</th>\n","      <th>target</th>\n","      <th>file_path</th>\n","      <th>patient_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ISIC_0082829</td>\n","      <td>1.0</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","      <td>IP_3249371</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ISIC_0096034</td>\n","      <td>1.0</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","      <td>IP_6723298</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ISIC_0104229</td>\n","      <td>1.0</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","      <td>IP_9057861</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-81795ba5-2a0c-48d7-821a-408bc38ef49a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-81795ba5-2a0c-48d7-821a-408bc38ef49a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-81795ba5-2a0c-48d7-821a-408bc38ef49a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-43eaf5b0-7773-4728-b7a1-12ff24efba50\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-43eaf5b0-7773-4728-b7a1-12ff24efba50')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-43eaf5b0-7773-4728-b7a1-12ff24efba50 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 33885,\n  \"fields\": [\n    {\n      \"column\": \"isic_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 27718,\n        \"samples\": [\n          \"ISIC_8483466\",\n          \"ISIC_7564675\",\n          \"ISIC_8217222\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.471149975142799,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"file_path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 28134,\n        \"samples\": [\n          \"/kaggle/input/isic-2024-challenge/train-image/image/ISIC_0385183.jpg\",\n          \"/kaggle/input/isic-2024-challenge/train-image/image/ISIC_4345416.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"patient_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6626,\n        \"samples\": [\n          \"dummy_21427\",\n          \"dummy_20877\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["CONFIG['T_max'] = df.shape[0] * (CONFIG[\"n_fold\"]-1) * CONFIG['epochs'] // CONFIG['train_batch_size'] // CONFIG[\"n_fold\"]\n","CONFIG['T_max']"],"metadata":{"id":"SxHsB8bMw4wc","papermill":{"duration":0.033653,"end_time":"2024-08-08T05:26:08.354478","exception":false,"start_time":"2024-08-08T05:26:08.320825","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724622869025,"user_tz":-120,"elapsed":19,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"ff93b09d-2e59-459d-cee0-e58b1bbec4f4"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8471"]},"metadata":{},"execution_count":47}]},{"cell_type":"markdown","source":["# Read the Test Data"],"metadata":{"papermill":{"duration":0.024544,"end_time":"2024-08-08T05:26:08.403751","exception":false,"start_time":"2024-08-08T05:26:08.379207","status":"completed"},"tags":[],"id":"qGBoKCJPMQwd"}},{"cell_type":"code","source":["class ISICDataset_for_Test(Dataset):\n","    def __init__(self, df, file_hdf, transforms=None):\n","        self.df = df\n","        self.fp_hdf = h5py.File(file_hdf, mode=\"r\")\n","        self.isic_ids = df['isic_id'].values\n","        self.targets = df['target'].values\n","        self.transforms = transforms\n","\n","    def __len__(self):\n","        return len(self.isic_ids)\n","\n","    def __getitem__(self, index):\n","        isic_id = self.isic_ids[index]\n","        img = np.array( Image.open(BytesIO(self.fp_hdf[isic_id][()])) )\n","        target = self.targets[index]\n","\n","        if self.transforms:\n","            img = self.transforms(image=img)[\"image\"]\n","\n","        return {\n","            'image': img,\n","            'target': target,\n","        }"],"metadata":{"papermill":{"duration":0.035088,"end_time":"2024-08-08T05:26:08.463388","exception":false,"start_time":"2024-08-08T05:26:08.4283","status":"completed"},"tags":[],"trusted":true,"id":"lO9Py-oXMQwd","executionInfo":{"status":"ok","timestamp":1724622869026,"user_tz":-120,"elapsed":16,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["# Load submission data\n","subm_data = pd.read_csv(TEST_CSV)\n","subm_data['target'] = 0 # dummy\n","display(subm_data.head())"],"metadata":{"papermill":{"duration":0.054824,"end_time":"2024-08-08T05:26:08.543121","exception":false,"start_time":"2024-08-08T05:26:08.488297","status":"completed"},"tags":[],"trusted":true,"id":"7bV643a2MQwd","colab":{"base_uri":"https://localhost:8080/","height":332},"executionInfo":{"status":"ok","timestamp":1724622869026,"user_tz":-120,"elapsed":15,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"6d3fe8e0-2497-445d-fd5f-4de17d690420"},"execution_count":49,"outputs":[{"output_type":"display_data","data":{"text/plain":["        isic_id  patient_id  age_approx     sex anatom_site_general  \\\n","0  ISIC_0015657  IP_6074337        45.0    male     posterior torso   \n","1  ISIC_0015729  IP_1664139        35.0  female     lower extremity   \n","2  ISIC_0015740  IP_7142616        65.0    male     posterior torso   \n","\n","   clin_size_long_diam_mm          image_type tbp_tile_type  tbp_lv_A  \\\n","0                    2.70  TBP tile: close-up        3D: XP  22.80433   \n","1                    2.52  TBP tile: close-up        3D: XP  16.64867   \n","2                    3.16  TBP tile: close-up        3D: XP  24.25384   \n","\n","   tbp_lv_Aext  ...  tbp_lv_stdL  tbp_lv_stdLExt  tbp_lv_symm_2axis  \\\n","0    20.007270  ...     1.281532        2.299935           0.479339   \n","1     9.657964  ...     1.271940        2.011223           0.426230   \n","2    19.937380  ...     1.080308        2.705857           0.366071   \n","\n","   tbp_lv_symm_2axis_angle   tbp_lv_x     tbp_lv_y    tbp_lv_z  \\\n","0                       20 -155.06510  1511.222000  113.980100   \n","1                       25 -112.36924   629.535889  -15.019287   \n","2                      110  -84.29282  1303.978000  -28.576050   \n","\n","                                         attribution  copyright_license  \\\n","0             Memorial Sloan Kettering Cancer Center              CC-BY   \n","1  Frazer Institute, The University of Queensland...              CC-BY   \n","2                                        FNQH Cairns              CC-BY   \n","\n","   target  \n","0       0  \n","1       0  \n","2       0  \n","\n","[3 rows x 45 columns]"],"text/html":["\n","  <div id=\"df-3ee13006-de9f-4c65-a7c6-95a608742cd0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>isic_id</th>\n","      <th>patient_id</th>\n","      <th>age_approx</th>\n","      <th>sex</th>\n","      <th>anatom_site_general</th>\n","      <th>clin_size_long_diam_mm</th>\n","      <th>image_type</th>\n","      <th>tbp_tile_type</th>\n","      <th>tbp_lv_A</th>\n","      <th>tbp_lv_Aext</th>\n","      <th>...</th>\n","      <th>tbp_lv_stdL</th>\n","      <th>tbp_lv_stdLExt</th>\n","      <th>tbp_lv_symm_2axis</th>\n","      <th>tbp_lv_symm_2axis_angle</th>\n","      <th>tbp_lv_x</th>\n","      <th>tbp_lv_y</th>\n","      <th>tbp_lv_z</th>\n","      <th>attribution</th>\n","      <th>copyright_license</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ISIC_0015657</td>\n","      <td>IP_6074337</td>\n","      <td>45.0</td>\n","      <td>male</td>\n","      <td>posterior torso</td>\n","      <td>2.70</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>22.80433</td>\n","      <td>20.007270</td>\n","      <td>...</td>\n","      <td>1.281532</td>\n","      <td>2.299935</td>\n","      <td>0.479339</td>\n","      <td>20</td>\n","      <td>-155.06510</td>\n","      <td>1511.222000</td>\n","      <td>113.980100</td>\n","      <td>Memorial Sloan Kettering Cancer Center</td>\n","      <td>CC-BY</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ISIC_0015729</td>\n","      <td>IP_1664139</td>\n","      <td>35.0</td>\n","      <td>female</td>\n","      <td>lower extremity</td>\n","      <td>2.52</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>16.64867</td>\n","      <td>9.657964</td>\n","      <td>...</td>\n","      <td>1.271940</td>\n","      <td>2.011223</td>\n","      <td>0.426230</td>\n","      <td>25</td>\n","      <td>-112.36924</td>\n","      <td>629.535889</td>\n","      <td>-15.019287</td>\n","      <td>Frazer Institute, The University of Queensland...</td>\n","      <td>CC-BY</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ISIC_0015740</td>\n","      <td>IP_7142616</td>\n","      <td>65.0</td>\n","      <td>male</td>\n","      <td>posterior torso</td>\n","      <td>3.16</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>24.25384</td>\n","      <td>19.937380</td>\n","      <td>...</td>\n","      <td>1.080308</td>\n","      <td>2.705857</td>\n","      <td>0.366071</td>\n","      <td>110</td>\n","      <td>-84.29282</td>\n","      <td>1303.978000</td>\n","      <td>-28.576050</td>\n","      <td>FNQH Cairns</td>\n","      <td>CC-BY</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 45 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ee13006-de9f-4c65-a7c6-95a608742cd0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3ee13006-de9f-4c65-a7c6-95a608742cd0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3ee13006-de9f-4c65-a7c6-95a608742cd0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-39b6da8f-bc8b-457e-9ffe-dc17defc2330\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-39b6da8f-bc8b-457e-9ffe-dc17defc2330')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-39b6da8f-bc8b-457e-9ffe-dc17defc2330 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{}}]},{"cell_type":"code","source":["#subm_data['file_path'] = subm_data['isic_id'].apply(get_test_file_path)\n","#subm_data['target'] = 0 # dummy\n","#subm_data = subm_data[subm_data[\"file_path\"].isin(test_images) ].reset_index(drop=True)\n","#subm_data"],"metadata":{"id":"yKwKqTO0PrFU","papermill":{"duration":0.030842,"end_time":"2024-08-08T05:26:08.599196","exception":false,"start_time":"2024-08-08T05:26:08.568354","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622869026,"user_tz":-120,"elapsed":13,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["df_sub = pd.read_csv(SAMPLE)\n","df_sub"],"metadata":{"papermill":{"duration":0.047348,"end_time":"2024-08-08T05:26:08.671361","exception":false,"start_time":"2024-08-08T05:26:08.624013","status":"completed"},"tags":[],"trusted":true,"id":"Bq5lhxcxMQwd","colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"status":"ok","timestamp":1724622869026,"user_tz":-120,"elapsed":12,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"ee209d8e-61c1-468c-c131-1f1b3684f02b"},"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        isic_id  target\n","0  ISIC_0015657     0.3\n","1  ISIC_0015729     0.3\n","2  ISIC_0015740     0.3"],"text/html":["\n","  <div id=\"df-b87a2dd9-bc57-4a79-a786-334163b2bd35\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>isic_id</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ISIC_0015657</td>\n","      <td>0.3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ISIC_0015729</td>\n","      <td>0.3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ISIC_0015740</td>\n","      <td>0.3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b87a2dd9-bc57-4a79-a786-334163b2bd35')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b87a2dd9-bc57-4a79-a786-334163b2bd35 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b87a2dd9-bc57-4a79-a786-334163b2bd35');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-87b7605f-7cb6-40fe-94bc-c10699abd20c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-87b7605f-7cb6-40fe-94bc-c10699abd20c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-87b7605f-7cb6-40fe-94bc-c10699abd20c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2a9cdfd5-0f28-4a17-b20d-43493f608913\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_sub')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2a9cdfd5-0f28-4a17-b20d-43493f608913 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_sub');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_sub","summary":"{\n  \"name\": \"df_sub\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"isic_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"ISIC_0015657\",\n          \"ISIC_0015729\",\n          \"ISIC_0015740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.3,\n        \"max\": 0.3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":51}]},{"cell_type":"markdown","source":["## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 10px 10px;\">Display Images</h2></span>"],"metadata":{"id":"Sw5pjhBew4wc","papermill":{"duration":0.025494,"end_time":"2024-08-08T05:26:08.722073","exception":false,"start_time":"2024-08-08T05:26:08.696579","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":["## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 10px 10px;\">Target Plot</h2></span>\n","\n","I added positive cases from past data to enlarge the positive cases size."],"metadata":{"id":"h9uTIpTww4wd","papermill":{"duration":0.035256,"end_time":"2024-08-08T05:26:10.364464","exception":false,"start_time":"2024-08-08T05:26:10.329208","status":"completed"},"tags":[]}},{"cell_type":"code","source":["plt.subplot(141)\n","plt.title(\"Total Data - 2024\")\n","df_2024 = pd.read_csv(f\"{ROOT_DIR}/train-metadata.csv\")\n","df_2024['target'].value_counts().plot(kind='bar', figsize=(20,4))\n","plt.subplot(142)\n","plt.title(\"Data combined past positive cases\")\n","df['target'].value_counts().plot(kind='bar', figsize=(20,4))"],"metadata":{"id":"Bv_tIX-5w4wd","papermill":{"duration":4.938687,"end_time":"2024-08-08T05:26:15.33865","exception":false,"start_time":"2024-08-08T05:26:10.399963","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":435},"executionInfo":{"status":"ok","timestamp":1724622874124,"user_tz":-120,"elapsed":5109,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"aa1611ec-5a6b-40c7-96ea-74c876cf775a"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: title={'center': 'Data combined past positive cases'}, xlabel='target'>"]},"metadata":{},"execution_count":52},{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x400 with 2 Axes>"],"image/png":"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FjdERERERCQLLG6IiIiIiEgWWNwQEREREZEssLghIiIiIiJZYHFDRERERESywOKGiIiIiIhkgcUNERERERHJAosbIiIiIiKSBRY3REREREQkCyxuiIiIiIhIFljcEBERERGRLLC4ISIiIiIiWWBxQ0REREREssDihoiIiIiIZIHFDRERERERyQKLGyIiIiIikgUWN0REREREJAssboiIiIiISBZY3BARERERkSywuCEiIiIiIllgcUNERERERLLA4oaIiIiIiGSBxQ0REREREckCixsiIiIiIpKFChU3y5cvR6tWraBWq6FWq6HVarF161ax/c6dOwgJCUG9evVgZWWFwMBAZGVlSZaRmZkJf39/1K5dG/b29pgyZQru3bsnidm1axfatm0LlUqFJk2aICYmplQuS5cuhaurK8zNzeHj44MDBw5I2suTCxERERERyUeFipv69evjo48+QmpqKg4dOoSXX34Zr732Gk6ePAkACA8Px6ZNm7B+/Xrs3r0bly5dQv/+/cX3FxYWwt/fHwUFBUhOTsaqVasQExODqKgoMebcuXPw9/dHjx49kJaWhrCwMIwePRoJCQlizNq1axEREYGZM2fi8OHDaN26NXQ6Ha5cuSLGPC4XIiIiIiKSF4UgCMLTLKBu3bqYP38+BgwYADs7O8TGxmLAgAEAgPT0dDRv3hwpKSno2LEjtm7dir59++LSpUtwcHAAAKxYsQLTpk1DdnY2lEolpk2bhri4OJw4cUJcx6BBg5CTk4P4+HgAgI+PD9q3b48lS5YAAIqKiuDi4oKJEydi+vTpyM3NfWwu5WEwGKDRaJCbmwu1Wv00u+mZc50eZ+wUZOf8R/7GToGoRqtJx9CqUJP2B88plYvnE6KnV95j6BPfc1NYWIgffvgBeXl50Gq1SE1Nxd27d+Hr6yvGuLu7o0GDBkhJSQEApKSkwNPTUyxsAECn08FgMIhXf1JSUiTLKI4pXkZBQQFSU1MlMSYmJvD19RVjypNLWfLz82EwGCQTERERERHVDBUubo4fPw4rKyuoVCqMGzcOv/zyCzw8PKDX66FUKmFjYyOJd3BwgF6vBwDo9XpJYVPcXtz2qBiDwYDbt2/j6tWrKCwsLDOm5DIel0tZ5s6dC41GI04uLi7l2ylERERERGR0FS5umjVrhrS0NOzfvx/jx49HUFAQTp069Sxyq3KR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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 10px 10px;\">Create Folds</h2></span>"],"metadata":{"id":"MmkDFqTsw4wd","papermill":{"duration":0.035869,"end_time":"2024-08-08T05:26:15.411635","exception":false,"start_time":"2024-08-08T05:26:15.375766","status":"completed"},"tags":[]}},{"cell_type":"code","source":["sgkf = StratifiedGroupKFold(n_splits=CONFIG['n_fold']) # I don't why my SGKF doesn't work without patient_id\n","from sklearn.model_selection import KFold\n","kf = KFold(CONFIG['n_fold'], shuffle=True)\n","for fold, ( _, val_) in enumerate(kf.split(df)):\n","    df.loc[val_ , \"kfold\"] = int(fold)"],"metadata":{"id":"XsqGyhGAw4wd","papermill":{"duration":0.054535,"end_time":"2024-08-08T05:26:15.503399","exception":false,"start_time":"2024-08-08T05:26:15.448864","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622874124,"user_tz":-120,"elapsed":8,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":53,"outputs":[]},{"cell_type":"markdown","source":["## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 10px 10px;\">Dataset Class</h2></span>"],"metadata":{"id":"AcDzNUZjw4wd","papermill":{"duration":0.036328,"end_time":"2024-08-08T05:26:15.575784","exception":false,"start_time":"2024-08-08T05:26:15.539456","status":"completed"},"tags":[]}},{"cell_type":"code","source":["class ISICDataset_for_Train(Dataset):\n","    def __init__(self, df, transforms=None):\n","        self.df_positive = df[df[\"target\"] == 1].reset_index()\n","        self.df_negative = df[df[\"target\"] == 0].reset_index()\n","        self.file_names_positive = self.df_positive['file_path'].values\n","        self.file_names_negative = self.df_negative['file_path'].values\n","        self.targets_positive = self.df_positive['target'].values\n","        self.targets_negative = self.df_negative['target'].values\n","        self.transforms = transforms\n","\n","    def __len__(self): # seems it is not used\n","        return len(self.df_positive) * 4\n","\n","    def __getitem__(self, index):\n","        if random.random() <= 1./(CONFIG[\"target_ratio\"]+1) :       # modified, was 0.25:\n","            df = self.df_positive\n","            file_names = self.file_names_positive\n","            targets = self.targets_positive\n","        else:\n","            df = self.df_negative\n","            file_names = self.file_names_negative\n","            targets = self.targets_negative\n","        index = index % df.shape[0]\n","\n","        img_path = file_names[index]\n","        img = cv2.imread(img_path)\n","        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","        target = targets[index]\n","\n","        if self.transforms:\n","            img = self.transforms(image=img)[\"image\"]\n","\n","        return {\n","            'image': img,\n","            'target': target\n","        }\n","\n","class ISICDataset(Dataset):\n","    def __init__(self, df, transforms=None):\n","        self.df = df\n","        self.file_names = df['file_path'].values\n","        self.targets = df['target'].values\n","        self.transforms = transforms\n","\n","    def __len__(self):\n","        return len(self.df)\n","\n","    def __getitem__(self, index):\n","        img_path = self.file_names[index]\n","        img = cv2.imread(img_path)\n","        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","        target = self.targets[index]\n","\n","        if self.transforms:\n","            img = self.transforms(image=img)[\"image\"]\n","\n","        return {\n","            'image': img,\n","            'target': target\n","        }"],"metadata":{"id":"4AjH4W_Dw4wd","papermill":{"duration":0.051684,"end_time":"2024-08-08T05:26:15.663645","exception":false,"start_time":"2024-08-08T05:26:15.611961","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622874125,"user_tz":-120,"elapsed":8,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":54,"outputs":[]},{"cell_type":"markdown","source":["## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 20px 20px\">Augmentations</h2></span>"],"metadata":{"id":"sYnldaqHw4we","papermill":{"duration":0.036182,"end_time":"2024-08-08T05:26:15.736194","exception":false,"start_time":"2024-08-08T05:26:15.700012","status":"completed"},"tags":[]}},{"cell_type":"code","source":["data_transforms = {\n","    \"train\": A.Compose([\n","        A.Resize(CONFIG['img_size'], CONFIG['img_size']),\n","        A.RandomRotate90(p=0.5),\n","        A.Flip(p=0.5),\n","        A.Downscale(p=0.25),\n","        A.ShiftScaleRotate(shift_limit=0.1,\n","                           scale_limit=0.15,\n","                           rotate_limit=60,\n","                           p=0.5),\n","        A.HueSaturationValue(\n","                hue_shift_limit=0.2,\n","                sat_shift_limit=0.2,\n","                val_shift_limit=0.2,\n","                p=0.5\n","            ),\n","        A.RandomBrightnessContrast(\n","                brightness_limit=(-0.1,0.1),\n","                contrast_limit=(-0.1, 0.1),\n","                p=0.5\n","            ),\n","        A.Normalize(\n","                mean=[0.485, 0.456, 0.406],\n","                std=[0.229, 0.224, 0.225],\n","                max_pixel_value=255.0,\n","                p=1.0\n","            ),\n","        ToTensorV2()], p=1.),\n","\n","    \"valid\": A.Compose([\n","        A.Resize(CONFIG['img_size'], CONFIG['img_size']),\n","        A.Normalize(\n","                mean=[0.485, 0.456, 0.406],\n","                std=[0.229, 0.224, 0.225],\n","                max_pixel_value=255.0,\n","                p=1.0\n","            ),\n","        ToTensorV2()], p=1.)\n","}"],"metadata":{"id":"9HEG4I2jw4we","papermill":{"duration":0.048267,"end_time":"2024-08-08T05:26:15.82049","exception":false,"start_time":"2024-08-08T05:26:15.772223","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622874125,"user_tz":-120,"elapsed":8,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["def prepare_loaders(df, fold):\n","    df_train = df[df.kfold <= CONFIG[\"n_fold\"]].reset_index(drop=True)\n","    df_valid = df[df.kfold == fold].reset_index(drop=True)\n","\n","    train_dataset = ISICDataset_for_Train(df_train, transforms=data_transforms[\"train\"])\n","    #train_dataset = ISICDataset(df_train, transforms=data_transforms[\"train\"])\n","    valid_dataset = ISICDataset(df_valid, transforms=data_transforms[\"valid\"])\n","\n","    train_loader = DataLoader(train_dataset, batch_size=CONFIG['train_batch_size'],\n","                              num_workers=2, shuffle=True, pin_memory=True, drop_last=True)\n","    valid_loader = DataLoader(valid_dataset, batch_size=CONFIG['valid_batch_size'],\n","                              num_workers=2, shuffle=False, pin_memory=True)\n","\n","    return train_loader, valid_loader"],"metadata":{"papermill":{"duration":0.045278,"end_time":"2024-08-08T05:26:17.579353","exception":false,"start_time":"2024-08-08T05:26:17.534075","status":"completed"},"tags":[],"trusted":true,"id":"WSXf4b-aXxYx","executionInfo":{"status":"ok","timestamp":1724622874125,"user_tz":-120,"elapsed":8,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":56,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Create Model</h1></span>\n","## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px\">GeM Pooling</h2></span>"],"metadata":{"id":"MbPF2iWDw4we","papermill":{"duration":0.036009,"end_time":"2024-08-08T05:26:15.893321","exception":false,"start_time":"2024-08-08T05:26:15.857312","status":"completed"},"tags":[]}},{"cell_type":"code","source":["class GeM(nn.Module):\n","    def __init__(self, p=3, eps=1e-6):\n","        super(GeM, self).__init__()\n","        self.p = nn.Parameter(torch.ones(1)*p)\n","        self.eps = eps\n","\n","    def forward(self, x):\n","        return self.gem(x, p=self.p, eps=self.eps)\n","\n","    def gem(self, x, p=3, eps=1e-6):\n","        return F.avg_pool2d(x.clamp(min=eps).pow(p), (x.size(-2), x.size(-1))).pow(1./p)\n","\n","    def __repr__(self):\n","        return self.__class__.__name__ + \\\n","                '(' + 'p=' + '{:.4f}'.format(self.p.data.tolist()[0]) + \\\n","                ', ' + 'eps=' + str(self.eps) + ')'"],"metadata":{"papermill":{"duration":0.046031,"end_time":"2024-08-08T05:26:15.975332","exception":false,"start_time":"2024-08-08T05:26:15.929301","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.838762Z","iopub.execute_input":"2024-08-10T08:14:32.839237Z","iopub.status.idle":"2024-08-10T08:14:32.853298Z","shell.execute_reply.started":"2024-08-10T08:14:32.839181Z","shell.execute_reply":"2024-08-10T08:14:32.851694Z"},"trusted":true,"id":"RBjFD8cEC_1H","executionInfo":{"status":"ok","timestamp":1724622874125,"user_tz":-120,"elapsed":7,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["class ISICModel(nn.Module):\n","    def __init__(self, model_name, num_classes=1, pretrained=True, checkpoint_path=None):\n","        super(ISICModel, self).__init__()\n","        self.model = timm.create_model(model_name, pretrained=pretrained, checkpoint_path=checkpoint_path)\n","        #self.model = timm.create_model(model_name, pretrained=pretrained)\n","        #self.model = torchvision.models.efficientnet_b0(weights = 'DEFAULT')\n","        #print(self.model)\n","        #for param in self.model.parameters():\n","            #param.requires_grad = False\n","        in_features = self.model.classifier.in_features\n","        self.model.classifier = nn.Identity()\n","        self.model.global_pool = nn.Identity()\n","        self.pooling = GeM()\n","        self.linear = nn.Linear(in_features, num_classes)\n","        self.sigmoid = nn.Sigmoid()\n","\n","    def forward(self, images):\n","        features = self.model(images)\n","        pooled_features = self.pooling(features).flatten(1)\n","        output = self.sigmoid(self.linear(pooled_features))\n","        return output\n","\n","torch.cuda.empty_cache()\n","#model = ISICModel(CONFIG['model_name'], checkpoint_path=CONFIG['checkpoint_path'])\n","model = ISICModel(CONFIG['model_name'])\n","model.to(CONFIG['device']);"],"metadata":{"papermill":{"duration":0.778828,"end_time":"2024-08-08T05:26:16.790309","exception":false,"start_time":"2024-08-08T05:26:16.011481","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.85486Z","iopub.execute_input":"2024-08-10T08:14:32.855392Z","iopub.status.idle":"2024-08-10T08:15:15.44899Z","shell.execute_reply.started":"2024-08-10T08:14:32.855346Z","shell.execute_reply":"2024-08-10T08:15:15.446589Z"},"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622874526,"user_tz":-120,"elapsed":408,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"id":"fKg7qv4fC_1P"},"execution_count":58,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"JRQTykkRC_1Q"}},{"cell_type":"code","source":["torch.save(model, path_isic_data+\"zinneke_picture\")"],"metadata":{"id":"JcvkMMZrC_1Q","executionInfo":{"status":"ok","timestamp":1724622874911,"user_tz":-120,"elapsed":388,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":59,"outputs":[]},{"cell_type":"code","source":["model = torch.load(path_isic_data+\"zinneke_picture\")"],"metadata":{"id":"aJB1hl0VC_1Q","executionInfo":{"status":"ok","timestamp":1724622875234,"user_tz":-120,"elapsed":326,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":60,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px;\">Loss Function</h1></span>"],"metadata":{"id":"IVn8VUx5w4we","papermill":{"duration":0.036201,"end_time":"2024-08-08T05:26:16.863722","exception":false,"start_time":"2024-08-08T05:26:16.827521","status":"completed"},"tags":[]}},{"cell_type":"code","source":["def criterion(outputs, targets):\n","    return nn.BCELoss()(outputs, targets)"],"metadata":{"id":"Nu6OTZN4w4we","papermill":{"duration":0.043234,"end_time":"2024-08-08T05:26:16.943194","exception":false,"start_time":"2024-08-08T05:26:16.89996","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622875234,"user_tz":-120,"elapsed":8,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":61,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 20px 20px\">Training Function</h1></span>"],"metadata":{"id":"5NOg4hfjw4wf","papermill":{"duration":0.036219,"end_time":"2024-08-08T05:26:17.015518","exception":false,"start_time":"2024-08-08T05:26:16.979299","status":"completed"},"tags":[]}},{"cell_type":"code","source":["def aucskl(y_score, y_true):\n","    # using sklearn.metric functions: (1) roc_curve and (2) auc\n","    fpr, tpr, _ = roc_curve(y_true, y_score, sample_weight=None)\n","    auc_skl = auc(fpr, tpr)\n","    if np.isnan(auc_skl): auc_skl = 0.\n","    return auc_skl"],"metadata":{"trusted":true,"id":"xmLptocyMQwk","executionInfo":{"status":"ok","timestamp":1724622875234,"user_tz":-120,"elapsed":7,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":62,"outputs":[]},{"cell_type":"code","source":["def train_one_epoch(model, optimizer, scheduler, dataloader, device, epoch):\n","    model.train()\n","\n","    dataset_size = 0\n","    running_loss = 0.0\n","    running_auroc  = 0.0\n","\n","    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n","    for step, data in bar:\n","        images = data['image'].to(device, dtype=torch.float)\n","        targets = data['target'].to(device, dtype=torch.float)\n","\n","        batch_size = images.size(0)\n","\n","        outputs = model(images).squeeze()\n","        loss = criterion(outputs, targets)\n","        loss = loss / CONFIG['n_accumulate']\n","\n","        loss.backward()\n","\n","        if (step + 1) % CONFIG['n_accumulate'] == 0:\n","            optimizer.step()\n","\n","            # zero the parameter gradients\n","            optimizer.zero_grad()\n","\n","            if scheduler is not None:\n","                scheduler.step()\n","\n","        #auroc = binary_auroc(input=outputs.squeeze(), target=targets).item()\n","        auroc = aucskl(outputs.detach().cpu().numpy(), targets.detach().cpu().numpy())\n","\n","        running_loss += (loss.item() * batch_size)\n","        running_auroc  += (auroc * batch_size)\n","        dataset_size += batch_size\n","\n","        epoch_loss = running_loss / dataset_size\n","        epoch_auroc = running_auroc / dataset_size\n","\n","        bar.set_postfix(Epoch=epoch, Train_Loss=epoch_loss, Train_Auroc=epoch_auroc,\n","                        LR=optimizer.param_groups[0]['lr'])\n","    gc.collect()\n","\n","    return epoch_loss, epoch_auroc"],"metadata":{"id":"23dFfm8_w4wf","papermill":{"duration":0.048582,"end_time":"2024-08-08T05:26:17.10052","exception":false,"start_time":"2024-08-08T05:26:17.051938","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622875234,"user_tz":-120,"elapsed":7,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":63,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 20px 20px\">Validation Function</h1></span>"],"metadata":{"id":"bKAub0lRw4wf","papermill":{"duration":0.03595,"end_time":"2024-08-08T05:26:17.172507","exception":false,"start_time":"2024-08-08T05:26:17.136557","status":"completed"},"tags":[]}},{"cell_type":"code","source":["@torch.inference_mode()\n","def valid_one_epoch(model, dataloader, device, epoch):\n","    model.eval()\n","\n","    dataset_size = 0\n","    running_loss = 0.0\n","    running_auroc = 0.0\n","\n","    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n","    for step, data in bar:\n","        images = data['image'].to(device, dtype=torch.float)\n","        targets = data['target'].to(device, dtype=torch.float)\n","\n","        batch_size = images.size(0)\n","        outputs = model(images).squeeze()\n","        loss = criterion(outputs, targets)\n","        #auroc = binary_auroc(input=outputs.squeeze(), target=targets).item()\n","        auroc = aucskl(outputs.detach().cpu().numpy(), targets.detach().cpu().numpy())\n","        running_loss += (loss.item() * batch_size)\n","        running_auroc  += (auroc * batch_size)\n","        dataset_size += batch_size\n","\n","        epoch_loss = running_loss / dataset_size\n","        epoch_auroc = running_auroc / dataset_size\n","\n","        bar.set_postfix(Epoch=epoch, Valid_Loss=epoch_loss, Valid_Auroc=epoch_auroc,\n","                        LR=optimizer.param_groups[0]['lr'])\n","    gc.collect()\n","\n","    return epoch_loss, epoch_auroc"],"metadata":{"id":"m7Pblwfow4wf","papermill":{"duration":0.048479,"end_time":"2024-08-08T05:26:17.257097","exception":false,"start_time":"2024-08-08T05:26:17.208618","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622875234,"user_tz":-120,"elapsed":7,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":64,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Training</h1></span>"],"metadata":{"id":"6I3RXTRqw4wg","papermill":{"duration":0.03628,"end_time":"2024-08-08T05:26:17.329919","exception":false,"start_time":"2024-08-08T05:26:17.293639","status":"completed"},"tags":[]}},{"cell_type":"code","source":["def run_training(model, optimizer, scheduler, device, num_epochs):\n","    if torch.cuda.is_available():\n","        print(\"[INFO] Using GPU: {}\\n\".format(torch.cuda.get_device_name()))\n","\n","    start = time.time()\n","    best_model_wts = copy.deepcopy(model.state_dict())\n","    best_epoch_auroc = -np.inf\n","    best_train_loss = np.inf\n","    history = defaultdict(list)\n","\n","    for epoch in range(1, num_epochs + 1):\n","        gc.collect()\n","        train_epoch_loss, train_epoch_auroc = train_one_epoch(model, optimizer, scheduler,\n","                                           dataloader=train_loader,\n","                                           device=CONFIG['device'], epoch=epoch)\n","\n","        val_epoch_loss, val_epoch_auroc = valid_one_epoch(model, valid_loader, device=CONFIG['device'],\n","                                         epoch=epoch)\n","\n","        history['Train Loss'].append(train_epoch_loss)\n","        history['Valid Loss'].append(val_epoch_loss)\n","        history['Train AUROC'].append(train_epoch_auroc)\n","        history['Valid AUROC'].append(val_epoch_auroc)\n","        history['lr'].append( scheduler.get_lr()[0] )\n","        if train_epoch_loss <= best_train_loss:\n","            print(f\"Train Loss Improved ({best_train_loss} ---> {train_epoch_loss})\")\n","            best_train_loss = train_epoch_loss\n","            #best_model_wts = copy.deepcopy(model.state_dict())\n","            PATH = \"best_TRAIN_LOSS_model.bin\"\n","            torch.save(model.state_dict(), PATH)\n","            # Save a model file from the current directory\n","            print(f\"Model Saved\")\n","\n","        if best_epoch_auroc <= train_epoch_auroc:\n","            print(f\"Train AUROC Improved ({best_epoch_auroc} ---> {train_epoch_auroc})\")\n","            best_epoch_auroc = train_epoch_auroc\n","            best_model_wts = copy.deepcopy(model.state_dict())\n","            PATH = \"best_AUROC_model.bin\"\n","            torch.save(model.state_dict(), PATH)\n","            # Save a model file from the current directory\n","            print(f\"Model Saved\")\n","\n","\n","\n","        print()\n","\n","    end = time.time()\n","    time_elapsed = end - start\n","    print('Training complete in {:.0f}h {:.0f}m {:.0f}s'.format(\n","        time_elapsed // 3600, (time_elapsed % 3600) // 60, (time_elapsed % 3600) % 60))\n","    print(\"Best AUROC: {:.4f}\".format(best_epoch_auroc))\n","    print(\"Best Loss: {:.4f}\".format(best_train_loss))\n","\n","    # load best model weights\n","    model.load_state_dict(best_model_wts)\n","\n","    return model, history"],"metadata":{"id":"abXIGqdHw4wg","papermill":{"duration":0.050961,"end_time":"2024-08-08T05:26:17.417074","exception":false,"start_time":"2024-08-08T05:26:17.366113","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622875234,"user_tz":-120,"elapsed":6,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":65,"outputs":[]},{"cell_type":"code","source":["def fetch_scheduler(optimizer):\n","    if CONFIG['scheduler'] == 'CosineAnnealingLR':\n","        scheduler = lr_scheduler.CosineAnnealingLR(optimizer,T_max=CONFIG['T_max'],\n","                                                   eta_min=CONFIG['min_lr'])\n","    elif CONFIG['scheduler'] == 'CosineAnnealingWarmRestarts':\n","        scheduler = lr_scheduler.CosineAnnealingWarmRestarts(optimizer,T_0=CONFIG['T_0'],\n","                                                             eta_min=CONFIG['min_lr'])\n","    elif CONFIG['scheduler'] == None:\n","        return None\n","\n","    return scheduler"],"metadata":{"id":"NXA3ugA5w4wl","papermill":{"duration":0.044224,"end_time":"2024-08-08T05:26:17.497711","exception":false,"start_time":"2024-08-08T05:26:17.453487","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622875234,"user_tz":-120,"elapsed":6,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":66,"outputs":[]},{"cell_type":"code","source":["def prepare_loaders(df, fold):\n","    df_train = df[df.kfold <= CONFIG[\"n_fold\"]].reset_index(drop=True)\n","    df_valid = df[df.kfold <= 1].reset_index(drop=True)\n","\n","#     train_dataset = ISICDataset_for_Train(df_train, transforms=data_transforms[\"train\"])\n","    train_dataset = ISICDataset(df_train, transforms=data_transforms[\"train\"])\n","    valid_dataset = ISICDataset(df_valid, transforms=data_transforms[\"valid\"])\n","\n","    train_loader = DataLoader(train_dataset, batch_size=CONFIG['train_batch_size'],\n","                              num_workers=2, shuffle=True, pin_memory=True, drop_last=True)\n","    valid_loader = DataLoader(valid_dataset, batch_size=CONFIG['valid_batch_size'],\n","                              num_workers=2, shuffle=False, pin_memory=True)\n","\n","    return train_loader, valid_loader"],"metadata":{"id":"Ryk6hWc3w4wl","papermill":{"duration":0.045278,"end_time":"2024-08-08T05:26:17.579353","exception":false,"start_time":"2024-08-08T05:26:17.534075","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622875234,"user_tz":-120,"elapsed":6,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":67,"outputs":[]},{"cell_type":"markdown","source":["## <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 20px 20px\">Prepare Dataloader</h1></span>"],"metadata":{"id":"dLV1pSNZw4wl","papermill":{"duration":0.036243,"end_time":"2024-08-08T05:26:17.651888","exception":false,"start_time":"2024-08-08T05:26:17.615645","status":"completed"},"tags":[]}},{"cell_type":"code","source":["train_loader, valid_loader = prepare_loaders(df, fold=CONFIG[\"fold\"])"],"metadata":{"id":"cFNmeDX_w4wl","papermill":{"duration":0.049401,"end_time":"2024-08-08T05:26:17.737492","exception":false,"start_time":"2024-08-08T05:26:17.688091","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622875235,"user_tz":-120,"elapsed":6,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":68,"outputs":[]},{"cell_type":"markdown","source":["\n","## <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 20px 20px\">Define Optimizer and Scheduler</h1></span>"],"metadata":{"id":"4z9tVPRuw4wl","papermill":{"duration":0.036075,"end_time":"2024-08-08T05:26:17.810299","exception":false,"start_time":"2024-08-08T05:26:17.774224","status":"completed"},"tags":[]}},{"cell_type":"code","source":["optimizer = optim.Adam(model.parameters(), lr=CONFIG['learning_rate'],\n","                       weight_decay=CONFIG['weight_decay'])\n","scheduler = fetch_scheduler(optimizer)"],"metadata":{"id":"eAH9ZZSjw4wl","papermill":{"duration":0.045972,"end_time":"2024-08-08T05:26:17.892749","exception":false,"start_time":"2024-08-08T05:26:17.846777","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724622875235,"user_tz":-120,"elapsed":6,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":69,"outputs":[]},{"cell_type":"markdown","source":["## <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 20px 20px\">Start Training</h1></span>"],"metadata":{"id":"80JesmAnw4wl","papermill":{"duration":0.036163,"end_time":"2024-08-08T05:26:17.965128","exception":false,"start_time":"2024-08-08T05:26:17.928965","status":"completed"},"tags":[]}},{"cell_type":"code","source":["model, history = run_training(model, optimizer, scheduler,\n","                              device=CONFIG['device'],\n","                              num_epochs=CONFIG['epochs'])"],"metadata":{"id":"HgGzRq0ew4wm","papermill":{"duration":2463.394798,"end_time":"2024-08-08T06:07:21.396178","exception":false,"start_time":"2024-08-08T05:26:18.00138","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724628599350,"user_tz":-120,"elapsed":5724121,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"ce2436a9-e977-49d9-8fb4-a5da249df848"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] Using GPU: Tesla T4\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1058/1058 [08:48<00:00,  2.00it/s, Epoch=1, LR=4.81e-5, Train_Auroc=0.969, Train_Loss=0.204]\n","100%|██████████| 212/212 [01:00<00:00,  3.48it/s, Epoch=1, LR=4.81e-5, Valid_Auroc=0.00472, Valid_Loss=0.0912]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (inf ---> 0.20375997531588677)\n","Model Saved\n","Train AUROC Improved (-inf ---> 0.9692086237824974)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1058/1058 [08:36<00:00,  2.05it/s, Epoch=2, LR=4.28e-5, Train_Auroc=0.991, Train_Loss=0.12]\n","100%|██████████| 212/212 [00:55<00:00,  3.82it/s, Epoch=2, LR=4.28e-5, Valid_Auroc=0.00471, Valid_Loss=0.035]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.20375997531588677 ---> 0.12021211734383115)\n","Model Saved\n","Train AUROC Improved (0.9692086237824974 ---> 0.99149980501308)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1058/1058 [08:32<00:00,  2.06it/s, Epoch=3, LR=3.47e-5, Train_Auroc=0.997, Train_Loss=0.0787]\n","100%|██████████| 212/212 [00:55<00:00,  3.82it/s, Epoch=3, LR=3.47e-5, Valid_Auroc=0.00472, Valid_Loss=0.0238]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.12021211734383115 ---> 0.0787283094988921)\n","Model Saved\n","Train AUROC Improved (0.99149980501308 ---> 0.9967026003196643)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1058/1058 [08:33<00:00,  2.06it/s, Epoch=4, LR=2.53e-5, Train_Auroc=0.998, Train_Loss=0.053]\n","100%|██████████| 212/212 [00:55<00:00,  3.81it/s, Epoch=4, LR=2.53e-5, Valid_Auroc=0.00472, Valid_Loss=0.0139]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.0787283094988921 ---> 0.05299114622879907)\n","Model Saved\n","Train AUROC Improved (0.9967026003196643 ---> 0.9983478044922923)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1058/1058 [08:35<00:00,  2.05it/s, Epoch=5, LR=1.58e-5, Train_Auroc=0.999, Train_Loss=0.036]\n","100%|██████████| 212/212 [00:55<00:00,  3.83it/s, Epoch=5, LR=1.58e-5, Valid_Auroc=0.00472, Valid_Loss=0.00519]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.05299114622879907 ---> 0.03596124077758916)\n","Model Saved\n","Train AUROC Improved (0.9983478044922923 ---> 0.9992062258623641)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1058/1058 [08:35<00:00,  2.05it/s, Epoch=6, LR=7.78e-6, Train_Auroc=1, Train_Loss=0.0232]\n","100%|██████████| 212/212 [00:55<00:00,  3.80it/s, Epoch=6, LR=7.78e-6, Valid_Auroc=0.00472, Valid_Loss=0.00383]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.03596124077758916 ---> 0.023166880552977807)\n","Model Saved\n","Train AUROC Improved (0.9992062258623641 ---> 0.9996341504683428)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1058/1058 [08:33<00:00,  2.06it/s, Epoch=7, LR=2.41e-6, Train_Auroc=1, Train_Loss=0.0188]\n","100%|██████████| 212/212 [00:55<00:00,  3.82it/s, Epoch=7, LR=2.41e-6, Valid_Auroc=0.00472, Valid_Loss=0.00314]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.023166880552977807 ---> 0.018780343238775317)\n","Model Saved\n","Train AUROC Improved (0.9996341504683428 ---> 0.9997552811733824)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1058/1058 [08:30<00:00,  2.07it/s, Epoch=8, LR=5e-7, Train_Auroc=1, Train_Loss=0.0146]\n","100%|██████████| 212/212 [00:55<00:00,  3.83it/s, Epoch=8, LR=5e-7, Valid_Auroc=0.00472, Valid_Loss=0.0021]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.018780343238775317 ---> 0.014554711894329376)\n","Model Saved\n","Train AUROC Improved (0.9997552811733824 ---> 0.9998555642760404)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1058/1058 [08:31<00:00,  2.07it/s, Epoch=9, LR=2.36e-6, Train_Auroc=1, Train_Loss=0.0144]\n","100%|██████████| 212/212 [00:55<00:00,  3.82it/s, Epoch=9, LR=2.36e-6, Valid_Auroc=0.00472, Valid_Loss=0.002]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.014554711894329376 ---> 0.01444770136369942)\n","Model Saved\n","Train AUROC Improved (0.9998555642760404 ---> 0.99989602787086)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1058/1058 [08:32<00:00,  2.07it/s, Epoch=10, LR=7.69e-6, Train_Auroc=1, Train_Loss=0.0147]\n","100%|██████████| 212/212 [00:55<00:00,  3.82it/s, Epoch=10, LR=7.69e-6, Valid_Auroc=0.00472, Valid_Loss=0.00132]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Training complete in 1h 35m 23s\n","Best AUROC: 0.9999\n","Best Loss: 0.0144\n"]}]},{"cell_type":"code","source":["history = pd.DataFrame.from_dict(history)\n","history.to_csv(\"history.csv\", index=False)"],"metadata":{"id":"NltcbvKEw4wm","papermill":{"duration":3.317792,"end_time":"2024-08-08T06:07:28.052411","exception":false,"start_time":"2024-08-08T06:07:24.734619","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724628599351,"user_tz":-120,"elapsed":15,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":71,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Logs</h1></span>"],"metadata":{"id":"PMUc0rhKw4wm","papermill":{"duration":3.370339,"end_time":"2024-08-08T06:07:34.686239","exception":false,"start_time":"2024-08-08T06:07:31.3159","status":"completed"},"tags":[]}},{"cell_type":"code","source":["plt.plot( range(history.shape[0]), history[\"Train Loss\"].values, label=\"Train Loss\")\n","plt.plot( range(history.shape[0]), history[\"Valid Loss\"].values, label=\"Valid Loss\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"Loss\")\n","plt.grid()\n","plt.legend()\n","plt.show()"],"metadata":{"id":"eKWB6zkIw4wm","papermill":{"duration":3.535561,"end_time":"2024-08-08T06:07:41.524938","exception":false,"start_time":"2024-08-08T06:07:37.989377","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1724628599853,"user_tz":-120,"elapsed":7,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"ac237ef2-f6e6-4f12-9a9a-1f9180411063"},"execution_count":72,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.plot( range(history.shape[0]), history[\"Train AUROC\"].values, label=\"Train AUROC\")\n","plt.plot( range(history.shape[0]), history[\"Valid AUROC\"].values, label=\"Valid AUROC\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"AUROC\")\n","plt.grid()\n","plt.legend()\n","plt.show()"],"metadata":{"id":"-NuL9qi3w4wm","papermill":{"duration":3.653158,"end_time":"2024-08-08T06:07:48.462548","exception":false,"start_time":"2024-08-08T06:07:44.80939","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1724628599853,"user_tz":-120,"elapsed":5,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"b568195b-6ed5-40d7-8d31-8e62e92ddc4b"},"execution_count":73,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.plot( range(history.shape[0]), history[\"lr\"].values, label=\"lr\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"lr\")\n","plt.grid()\n","plt.legend()\n","plt.show()"],"metadata":{"id":"Uj5fTuJQw4wm","papermill":{"duration":3.533189,"end_time":"2024-08-08T06:07:55.348307","exception":false,"start_time":"2024-08-08T06:07:51.815118","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":465},"executionInfo":{"status":"ok","timestamp":1724628600238,"user_tz":-120,"elapsed":5,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"fb348b05-c27d-425f-e3fa-49d4fc08803c"},"execution_count":74,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["torch.save(model, path_isic_data+\"zinneke_picture.pt\")"],"metadata":{"id":"uzQ0qOv41Naa","executionInfo":{"status":"ok","timestamp":1724628600480,"user_tz":-120,"elapsed":245,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["model = torch.load(path_isic_data+\"zinneke_picture.pt\")"],"metadata":{"id":"so5FR3dF1Naq","executionInfo":{"status":"ok","timestamp":1724628600480,"user_tz":-120,"elapsed":3,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":76,"outputs":[]},{"cell_type":"markdown","source":["# INFERENCE THREE TEST EXAMPLES"],"metadata":{"id":"poBXfFf0PrFK","papermill":{"duration":3.270445,"end_time":"2024-08-08T06:08:01.934219","exception":false,"start_time":"2024-08-08T06:07:58.663774","status":"completed"},"tags":[]}},{"cell_type":"code","source":["test_post_dataset = ISICDataset_for_Test(subm_data, TEST_HDF, transforms=data_transforms[\"valid\"])\n","test_post_loader = DataLoader(test_post_dataset, batch_size=CONFIG['valid_batch_size'],\n","                          num_workers=2, shuffle=False, pin_memory=True)"],"metadata":{"id":"wenCNmX25tMZ","papermill":{"duration":3.327282,"end_time":"2024-08-08T06:08:08.620166","exception":false,"start_time":"2024-08-08T06:08:05.292884","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724628600480,"user_tz":-120,"elapsed":3,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":77,"outputs":[]},{"cell_type":"markdown","source":["## start inference"],"metadata":{"papermill":{"duration":3.243046,"end_time":"2024-08-08T06:08:15.106851","exception":false,"start_time":"2024-08-08T06:08:11.863805","status":"completed"},"tags":[],"id":"9Jh7HiDvMQwo"}},{"cell_type":"code","source":["preds_test = []\n","with torch.no_grad():\n","    bar = tqdm(enumerate(test_post_loader), total=len(test_post_loader))\n","    for step, data in bar:\n","        images = data['image'].to(CONFIG[\"device\"], dtype=torch.float)\n","        batch_size =  images.size(0)\n","        outputs = model(images)\n","        preds_test.append( outputs.detach().cpu().numpy() )\n","preds_test = np.concatenate(preds_test).flatten()"],"metadata":{"id":"JkbMiY6fPrFV","papermill":{"duration":3.741433,"end_time":"2024-08-08T06:08:22.173626","exception":false,"start_time":"2024-08-08T06:08:18.432193","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724628601853,"user_tz":-120,"elapsed":1376,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"4b2cf095-710e-4623-d2d9-f85723aef6cb"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1/1 [00:01<00:00,  1.16s/it]\n"]}]},{"cell_type":"code","source":["# Assign predictions to submission DataFrame # this seems correct\n","subm_data[\"preds\"] = preds_test\n","display(subm_data.head())"],"metadata":{"id":"u_StnHmnPrFV","papermill":{"duration":3.27493,"end_time":"2024-08-08T06:08:28.717104","exception":false,"start_time":"2024-08-08T06:08:25.442174","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":332},"executionInfo":{"status":"ok","timestamp":1724628601854,"user_tz":-120,"elapsed":13,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"29863aa0-5774-4659-fa9d-84846dab7299"},"execution_count":79,"outputs":[{"output_type":"display_data","data":{"text/plain":["        isic_id  patient_id  age_approx     sex anatom_site_general  \\\n","0  ISIC_0015657  IP_6074337        45.0    male     posterior torso   \n","1  ISIC_0015729  IP_1664139        35.0  female     lower extremity   \n","2  ISIC_0015740  IP_7142616        65.0    male     posterior torso   \n","\n","   clin_size_long_diam_mm          image_type tbp_tile_type  tbp_lv_A  \\\n","0                    2.70  TBP tile: close-up        3D: XP  22.80433   \n","1                    2.52  TBP tile: close-up        3D: XP  16.64867   \n","2                    3.16  TBP tile: close-up        3D: XP  24.25384   \n","\n","   tbp_lv_Aext  ...  tbp_lv_stdLExt  tbp_lv_symm_2axis  \\\n","0    20.007270  ...        2.299935           0.479339   \n","1     9.657964  ...        2.011223           0.426230   \n","2    19.937380  ...        2.705857           0.366071   \n","\n","   tbp_lv_symm_2axis_angle   tbp_lv_x     tbp_lv_y    tbp_lv_z  \\\n","0                       20 -155.06510  1511.222000  113.980100   \n","1                       25 -112.36924   629.535889  -15.019287   \n","2                      110  -84.29282  1303.978000  -28.576050   \n","\n","                                         attribution  copyright_license  \\\n","0             Memorial Sloan Kettering Cancer Center              CC-BY   \n","1  Frazer Institute, The University of Queensland...              CC-BY   \n","2                                        FNQH Cairns              CC-BY   \n","\n","   target         preds  \n","0       0  9.817754e-09  \n","1       0  3.748532e-06  \n","2       0  1.669658e-04  \n","\n","[3 rows x 46 columns]"],"text/html":["\n","  <div id=\"df-d8f073c2-98dd-4f31-8b58-bdb5bfb358b3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>isic_id</th>\n","      <th>patient_id</th>\n","      <th>age_approx</th>\n","      <th>sex</th>\n","      <th>anatom_site_general</th>\n","      <th>clin_size_long_diam_mm</th>\n","      <th>image_type</th>\n","      <th>tbp_tile_type</th>\n","      <th>tbp_lv_A</th>\n","      <th>tbp_lv_Aext</th>\n","      <th>...</th>\n","      <th>tbp_lv_stdLExt</th>\n","      <th>tbp_lv_symm_2axis</th>\n","      <th>tbp_lv_symm_2axis_angle</th>\n","      <th>tbp_lv_x</th>\n","      <th>tbp_lv_y</th>\n","      <th>tbp_lv_z</th>\n","      <th>attribution</th>\n","      <th>copyright_license</th>\n","      <th>target</th>\n","      <th>preds</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ISIC_0015657</td>\n","      <td>IP_6074337</td>\n","      <td>45.0</td>\n","      <td>male</td>\n","      <td>posterior torso</td>\n","      <td>2.70</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>22.80433</td>\n","      <td>20.007270</td>\n","      <td>...</td>\n","      <td>2.299935</td>\n","      <td>0.479339</td>\n","      <td>20</td>\n","      <td>-155.06510</td>\n","      <td>1511.222000</td>\n","      <td>113.980100</td>\n","      <td>Memorial Sloan Kettering Cancer Center</td>\n","      <td>CC-BY</td>\n","      <td>0</td>\n","      <td>9.817754e-09</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ISIC_0015729</td>\n","      <td>IP_1664139</td>\n","      <td>35.0</td>\n","      <td>female</td>\n","      <td>lower extremity</td>\n","      <td>2.52</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>16.64867</td>\n","      <td>9.657964</td>\n","      <td>...</td>\n","      <td>2.011223</td>\n","      <td>0.426230</td>\n","      <td>25</td>\n","      <td>-112.36924</td>\n","      <td>629.535889</td>\n","      <td>-15.019287</td>\n","      <td>Frazer Institute, The University of Queensland...</td>\n","      <td>CC-BY</td>\n","      <td>0</td>\n","      <td>3.748532e-06</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ISIC_0015740</td>\n","      <td>IP_7142616</td>\n","      <td>65.0</td>\n","      <td>male</td>\n","      <td>posterior torso</td>\n","      <td>3.16</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>24.25384</td>\n","      <td>19.937380</td>\n","      <td>...</td>\n","      <td>2.705857</td>\n","      <td>0.366071</td>\n","      <td>110</td>\n","      <td>-84.29282</td>\n","      <td>1303.978000</td>\n","      <td>-28.576050</td>\n","      <td>FNQH Cairns</td>\n","      <td>CC-BY</td>\n","      <td>0</td>\n","      <td>1.669658e-04</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 46 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d8f073c2-98dd-4f31-8b58-bdb5bfb358b3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d8f073c2-98dd-4f31-8b58-bdb5bfb358b3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d8f073c2-98dd-4f31-8b58-bdb5bfb358b3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ef25ee2c-8b28-4bd8-b157-173ce65268e7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ef25ee2c-8b28-4bd8-b157-173ce65268e7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ef25ee2c-8b28-4bd8-b157-173ce65268e7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{}}]},{"cell_type":"code","source":["subm_data.to_csv(path_isic_data+\"test_for_prediction.csv\", index=False)"],"metadata":{"id":"ENpB-RNa38N_","papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724628601854,"user_tz":-120,"elapsed":12,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":80,"outputs":[]},{"cell_type":"code","source":["# Assign predictions to submission DataFrame # this seems correct\n","subm_data[\"target\"] = preds_test\n"],"metadata":{"papermill":{"duration":3.27493,"end_time":"2024-08-08T06:08:28.717104","exception":false,"start_time":"2024-08-08T06:08:25.442174","status":"completed"},"tags":[],"trusted":true,"id":"O0tVgZoyMQwo","executionInfo":{"status":"ok","timestamp":1724628601854,"user_tz":-120,"elapsed":11,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":81,"outputs":[]},{"cell_type":"code","source":["subm_data = subm_data[['isic_id', 'target']]\n","subm_data.to_csv(path_isic_data+'submission.csv', index=False)\n","display(subm_data.head())"],"metadata":{"id":"H50CqlV_PrFV","papermill":{"duration":3.381316,"end_time":"2024-08-08T06:08:35.344422","exception":false,"start_time":"2024-08-08T06:08:31.963106","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"status":"ok","timestamp":1724628601854,"user_tz":-120,"elapsed":11,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"1ce70982-d6ae-4530-c9cc-291654c5f783"},"execution_count":82,"outputs":[{"output_type":"display_data","data":{"text/plain":["        isic_id        target\n","0  ISIC_0015657  9.817754e-09\n","1  ISIC_0015729  3.748532e-06\n","2  ISIC_0015740  1.669658e-04"],"text/html":["\n","  <div id=\"df-2aac3bee-44c4-42bb-b82e-6ae758b598c9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>isic_id</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ISIC_0015657</td>\n","      <td>9.817754e-09</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ISIC_0015729</td>\n","      <td>3.748532e-06</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ISIC_0015740</td>\n","      <td>1.669658e-04</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2aac3bee-44c4-42bb-b82e-6ae758b598c9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2aac3bee-44c4-42bb-b82e-6ae758b598c9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2aac3bee-44c4-42bb-b82e-6ae758b598c9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5b9e46cb-7609-40d7-825e-6bb085894c47\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5b9e46cb-7609-40d7-825e-6bb085894c47')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5b9e46cb-7609-40d7-825e-6bb085894c47 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(subm_data\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"isic_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"ISIC_0015657\",\n          \"ISIC_0015729\",\n          \"ISIC_0015740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          9.817753721108602e-09,\n          3.7485319808183704e-06,\n          0.00016696579405106604\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":[],"metadata":{"papermill":{"duration":3.25115,"end_time":"2024-08-08T06:08:41.87827","exception":false,"start_time":"2024-08-08T06:08:38.62712","status":"completed"},"tags":[],"id":"ZIG7ySUIMQwp"}},{"cell_type":"markdown","source":["# INFERENCE 2024 TRAIN SPLIT BEST AUC"],"metadata":{"id":"B_e2WpAn-ZxF","papermill":{"duration":3.276601,"end_time":"2024-08-08T06:08:48.402352","exception":false,"start_time":"2024-08-08T06:08:45.125751","status":"completed"},"tags":[]}},{"cell_type":"code","source":["df_2024['file_path'] = df_2024['isic_id'].apply(get_train_file_path)\n","df_2024 = df_2024[df_2024[\"file_path\"].isin(train_images) ].reset_index(drop=True)\n","df_2024"],"metadata":{"id":"r_2CKesDq0dL","papermill":{"duration":4.747528,"end_time":"2024-08-08T06:08:56.521196","exception":false,"start_time":"2024-08-08T06:08:51.773668","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":964},"executionInfo":{"status":"ok","timestamp":1724628603353,"user_tz":-120,"elapsed":1509,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"b293c5da-0b2b-4247-9f84-331d8ef7c966"},"execution_count":83,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             isic_id  target  patient_id  age_approx     sex  \\\n","0       ISIC_0015670       0  IP_1235828        60.0    male   \n","1       ISIC_0015845       0  IP_8170065        60.0    male   \n","2       ISIC_0015864       0  IP_6724798        60.0    male   \n","3       ISIC_0015902       0  IP_4111386        65.0    male   \n","4       ISIC_0024200       0  IP_8313778        55.0    male   \n","...              ...     ...         ...         ...     ...   \n","401054  ISIC_9999937       0  IP_1140263        70.0    male   \n","401055  ISIC_9999951       0  IP_5678181        60.0    male   \n","401056  ISIC_9999960       0  IP_0076153        65.0  female   \n","401057  ISIC_9999964       0  IP_5231513        30.0  female   \n","401058  ISIC_9999967       0  IP_6426047        50.0    male   \n","\n","       anatom_site_general  clin_size_long_diam_mm          image_type  \\\n","0          lower extremity                    3.04  TBP tile: close-up   \n","1                head/neck                    1.10  TBP tile: close-up   \n","2          posterior torso                    3.40  TBP tile: close-up   \n","3           anterior torso                    3.22  TBP tile: close-up   \n","4           anterior torso                    2.73  TBP tile: close-up   \n","...                    ...                     ...                 ...   \n","401054      anterior torso                    6.80  TBP tile: close-up   \n","401055     posterior torso                    3.11  TBP tile: close-up   \n","401056      anterior torso                    2.05  TBP tile: close-up   \n","401057      anterior torso                    2.80  TBP tile: close-up   \n","401058     lower extremity                    3.30  TBP tile: close-up   \n","\n","       tbp_tile_type   tbp_lv_A  ...  iddx_full  iddx_1  iddx_2  iddx_3  \\\n","0          3D: white  20.244422  ...     Benign  Benign     NaN     NaN   \n","1          3D: white  31.712570  ...     Benign  Benign     NaN     NaN   \n","2             3D: XP  22.575830  ...     Benign  Benign     NaN     NaN   \n","3             3D: XP  14.242329  ...     Benign  Benign     NaN     NaN   \n","4          3D: white  24.725520  ...     Benign  Benign     NaN     NaN   \n","...              ...        ...  ...        ...     ...     ...     ...   \n","401054        3D: XP  22.574335  ...     Benign  Benign     NaN     NaN   \n","401055     3D: white  19.977640  ...     Benign  Benign     NaN     NaN   \n","401056        3D: XP  17.332567  ...     Benign  Benign     NaN     NaN   \n","401057        3D: XP  22.288570  ...     Benign  Benign     NaN     NaN   \n","401058        3D: XP  16.792900  ...     Benign  Benign     NaN     NaN   \n","\n","        iddx_4  iddx_5  mel_mitotic_index  mel_thick_mm  \\\n","0          NaN     NaN                NaN           NaN   \n","1          NaN     NaN                NaN           NaN   \n","2          NaN     NaN                NaN           NaN   \n","3          NaN     NaN                NaN           NaN   \n","4          NaN     NaN                NaN           NaN   \n","...        ...     ...                ...           ...   \n","401054     NaN     NaN                NaN           NaN   \n","401055     NaN     NaN                NaN           NaN   \n","401056     NaN     NaN                NaN           NaN   \n","401057     NaN     NaN                NaN           NaN   \n","401058     NaN     NaN                NaN           NaN   \n","\n","        tbp_lv_dnn_lesion_confidence  \\\n","0                          97.517282   \n","1                           3.141455   \n","2                          99.804040   \n","3                          99.989998   \n","4                          70.442510   \n","...                              ...   \n","401054                     99.999988   \n","401055                     99.999820   \n","401056                     99.999416   \n","401057                    100.000000   \n","401058                     99.999960   \n","\n","                                                file_path  \n","0       /kaggle/input/isic-2024-challenge/train-image/...  \n","1       /kaggle/input/isic-2024-challenge/train-image/...  \n","2       /kaggle/input/isic-2024-challenge/train-image/...  \n","3       /kaggle/input/isic-2024-challenge/train-image/...  \n","4       /kaggle/input/isic-2024-challenge/train-image/...  \n","...                                                   ...  \n","401054  /kaggle/input/isic-2024-challenge/train-image/...  \n","401055  /kaggle/input/isic-2024-challenge/train-image/...  \n","401056  /kaggle/input/isic-2024-challenge/train-image/...  \n","401057  /kaggle/input/isic-2024-challenge/train-image/...  \n","401058  /kaggle/input/isic-2024-challenge/train-image/...  \n","\n","[401059 rows x 56 columns]"],"text/html":["\n","  <div id=\"df-c2bae80e-b9bd-4bac-ab7b-ce4be74a2fa6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>isic_id</th>\n","      <th>target</th>\n","      <th>patient_id</th>\n","      <th>age_approx</th>\n","      <th>sex</th>\n","      <th>anatom_site_general</th>\n","      <th>clin_size_long_diam_mm</th>\n","      <th>image_type</th>\n","      <th>tbp_tile_type</th>\n","      <th>tbp_lv_A</th>\n","      <th>...</th>\n","      <th>iddx_full</th>\n","      <th>iddx_1</th>\n","      <th>iddx_2</th>\n","      <th>iddx_3</th>\n","      <th>iddx_4</th>\n","      <th>iddx_5</th>\n","      <th>mel_mitotic_index</th>\n","      <th>mel_thick_mm</th>\n","      <th>tbp_lv_dnn_lesion_confidence</th>\n","      <th>file_path</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ISIC_0015670</td>\n","      <td>0</td>\n","      <td>IP_1235828</td>\n","      <td>60.0</td>\n","      <td>male</td>\n","      <td>lower extremity</td>\n","      <td>3.04</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: white</td>\n","      <td>20.244422</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>97.517282</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ISIC_0015845</td>\n","      <td>0</td>\n","      <td>IP_8170065</td>\n","      <td>60.0</td>\n","      <td>male</td>\n","      <td>head/neck</td>\n","      <td>1.10</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: white</td>\n","      <td>31.712570</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>3.141455</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ISIC_0015864</td>\n","      <td>0</td>\n","      <td>IP_6724798</td>\n","      <td>60.0</td>\n","      <td>male</td>\n","      <td>posterior torso</td>\n","      <td>3.40</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>22.575830</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>99.804040</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ISIC_0015902</td>\n","      <td>0</td>\n","      <td>IP_4111386</td>\n","      <td>65.0</td>\n","      <td>male</td>\n","      <td>anterior torso</td>\n","      <td>3.22</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>14.242329</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>99.989998</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ISIC_0024200</td>\n","      <td>0</td>\n","      <td>IP_8313778</td>\n","      <td>55.0</td>\n","      <td>male</td>\n","      <td>anterior torso</td>\n","      <td>2.73</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: white</td>\n","      <td>24.725520</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>70.442510</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>401054</th>\n","      <td>ISIC_9999937</td>\n","      <td>0</td>\n","      <td>IP_1140263</td>\n","      <td>70.0</td>\n","      <td>male</td>\n","      <td>anterior torso</td>\n","      <td>6.80</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>22.574335</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>99.999988</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>401055</th>\n","      <td>ISIC_9999951</td>\n","      <td>0</td>\n","      <td>IP_5678181</td>\n","      <td>60.0</td>\n","      <td>male</td>\n","      <td>posterior torso</td>\n","      <td>3.11</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: white</td>\n","      <td>19.977640</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>99.999820</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>401056</th>\n","      <td>ISIC_9999960</td>\n","      <td>0</td>\n","      <td>IP_0076153</td>\n","      <td>65.0</td>\n","      <td>female</td>\n","      <td>anterior torso</td>\n","      <td>2.05</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>17.332567</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>99.999416</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>401057</th>\n","      <td>ISIC_9999964</td>\n","      <td>0</td>\n","      <td>IP_5231513</td>\n","      <td>30.0</td>\n","      <td>female</td>\n","      <td>anterior torso</td>\n","      <td>2.80</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>22.288570</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>100.000000</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>401058</th>\n","      <td>ISIC_9999967</td>\n","      <td>0</td>\n","      <td>IP_6426047</td>\n","      <td>50.0</td>\n","      <td>male</td>\n","      <td>lower extremity</td>\n","      <td>3.30</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>16.792900</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>99.999960</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>401059 rows × 56 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2bae80e-b9bd-4bac-ab7b-ce4be74a2fa6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c2bae80e-b9bd-4bac-ab7b-ce4be74a2fa6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c2bae80e-b9bd-4bac-ab7b-ce4be74a2fa6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4055d435-9437-445e-b13c-0118edf2b4fc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4055d435-9437-445e-b13c-0118edf2b4fc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4055d435-9437-445e-b13c-0118edf2b4fc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d1c4f2ac-0a7a-4ed4-a573-1da3b2adaddd\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2024')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d1c4f2ac-0a7a-4ed4-a573-1da3b2adaddd button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_2024');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_2024"}},"metadata":{},"execution_count":83}]},{"cell_type":"code","source":["df_2024.to_csv(path_isic_data+\"df_2024_for prediction.csv\", index=False) # this is not usefull"],"metadata":{"papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"trusted":true,"id":"9CI3rNrWMQwp","executionInfo":{"status":"ok","timestamp":1724628621568,"user_tz":-120,"elapsed":18219,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":84,"outputs":[]},{"cell_type":"code","source":["train_post_dataset = ISICDataset(df_2024, transforms=data_transforms[\"valid\"])\n","train_post_loader = DataLoader(train_post_dataset, batch_size=CONFIG['valid_batch_size'],\n","                          num_workers=2, shuffle=False, pin_memory=True)"],"metadata":{"papermill":{"duration":3.299116,"end_time":"2024-08-08T06:09:03.087075","exception":false,"start_time":"2024-08-08T06:08:59.787959","status":"completed"},"tags":[],"trusted":true,"id":"Pkjv1FTvMQwp","executionInfo":{"status":"ok","timestamp":1724628621568,"user_tz":-120,"elapsed":17,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":85,"outputs":[]},{"cell_type":"code","source":["preds_train = []\n","with torch.no_grad():\n","    bar = tqdm(enumerate(train_post_loader), total=len(train_post_loader))\n","    for step, data in bar:\n","        images = data['image'].to(CONFIG[\"device\"], dtype=torch.float)\n","        batch_size = images.size(0)\n","        outputs = model(images)\n","        preds_train.append( outputs.detach().cpu().numpy() )\n","preds_train = np.concatenate(preds_train).flatten()"],"metadata":{"id":"zoaBJPPY5tMZ","papermill":{"duration":1244.119438,"end_time":"2024-08-08T06:29:50.473085","exception":false,"start_time":"2024-08-08T06:09:06.353647","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724630240796,"user_tz":-120,"elapsed":1619244,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"9e5c778d-5e03-4c6c-8c75-89377f43e625"},"execution_count":86,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 6267/6267 [26:59<00:00,  3.87it/s]\n"]}]},{"cell_type":"code","source":["df_2024[\"preds\"] = preds_train\n"],"metadata":{"id":"wx53HJML5tMZ","papermill":{"duration":3.596489,"end_time":"2024-08-08T06:29:57.646601","exception":false,"start_time":"2024-08-08T06:29:54.050112","status":"completed"},"tags":[],"trusted":true,"executionInfo":{"status":"ok","timestamp":1724630240796,"user_tz":-120,"elapsed":19,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":87,"outputs":[]},{"cell_type":"code","source":["### df_2024.to_csv(\"my-mix-image-.csv\", index=False) # not used here and too large"],"metadata":{"papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"id":"swAmREoXMQwp","executionInfo":{"status":"ok","timestamp":1724630240796,"user_tz":-120,"elapsed":5,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":88,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"-Gz4_1CjMQwq","executionInfo":{"status":"ok","timestamp":1724630240796,"user_tz":-120,"elapsed":5,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":88,"outputs":[]},{"cell_type":"code","source":["df_2024[['isic_id', 'target', 'preds']].to_csv(path_isic_data+\"df_2024_after prediction.csv\", index=False)"],"metadata":{"papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"trusted":true,"id":"jsWvay5s49fy","executionInfo":{"status":"ok","timestamp":1724630241696,"user_tz":-120,"elapsed":905,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":89,"outputs":[]},{"cell_type":"markdown","source":["# INFERENCE 2024 TRAIN SPLIT BEST LOSS"],"metadata":{"papermill":{"duration":3.276601,"end_time":"2024-08-08T06:08:48.402352","exception":false,"start_time":"2024-08-08T06:08:45.125751","status":"completed"},"tags":[],"id":"qOHY1RdMKn3H"}},{"cell_type":"code","source":["model_loss = torch.load(path_isic_data+\"zinneke_picture\")\n","PATH = \"best_TRAIN_LOSS_model.bin\"\n","model_loss.load_state_dict(torch.load(PATH))\n","model_loss.eval()\n","torch.save(model_loss, path_isic_data+\"zinneke_picture_loss.pt\")"],"metadata":{"id":"YxIgN_VMKn3K","executionInfo":{"status":"ok","timestamp":1724630242430,"user_tz":-120,"elapsed":736,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":90,"outputs":[]},{"cell_type":"code","source":["df_2024 = pd.read_csv(path_isic_data+\"df_2024_for prediction.csv\")"],"metadata":{"papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"trusted":true,"id":"bxTQgSTdKn3I","executionInfo":{"status":"ok","timestamp":1724630247045,"user_tz":-120,"elapsed":4617,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":91,"outputs":[]},{"cell_type":"code","source":["train_post_dataset = ISICDataset(df_2024, transforms=data_transforms[\"valid\"])\n","train_post_loader = DataLoader(train_post_dataset, batch_size=CONFIG['valid_batch_size'],\n","                          num_workers=2, shuffle=False, pin_memory=True)"],"metadata":{"papermill":{"duration":3.299116,"end_time":"2024-08-08T06:09:03.087075","exception":false,"start_time":"2024-08-08T06:08:59.787959","status":"completed"},"tags":[],"trusted":true,"id":"V5dp1PXPKn3J","executionInfo":{"status":"ok","timestamp":1724630247046,"user_tz":-120,"elapsed":15,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":92,"outputs":[]},{"cell_type":"code","source":["preds_train = []\n","with torch.no_grad():\n","    bar = tqdm(enumerate(train_post_loader), total=len(train_post_loader))\n","    for step, data in bar:\n","        images = data['image'].to(CONFIG[\"device\"], dtype=torch.float)\n","        batch_size = images.size(0)\n","        outputs = model_loss(images)\n","        preds_train.append( outputs.detach().cpu().numpy() )\n","preds_train = np.concatenate(preds_train).flatten()"],"metadata":{"papermill":{"duration":1244.119438,"end_time":"2024-08-08T06:29:50.473085","exception":false,"start_time":"2024-08-08T06:09:06.353647","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"yi3Qd2XMKn3J","executionInfo":{"status":"ok","timestamp":1724631864658,"user_tz":-120,"elapsed":1617626,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"5f49c5ba-e302-4642-e973-4591aaea9d12"},"execution_count":93,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 6267/6267 [26:57<00:00,  3.87it/s]\n"]}]},{"cell_type":"code","source":["df_2024[\"preds\"] = preds_train\n"],"metadata":{"papermill":{"duration":3.596489,"end_time":"2024-08-08T06:29:57.646601","exception":false,"start_time":"2024-08-08T06:29:54.050112","status":"completed"},"tags":[],"trusted":true,"id":"ZzjganrcKn3J","executionInfo":{"status":"ok","timestamp":1724631864658,"user_tz":-120,"elapsed":16,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":94,"outputs":[]},{"cell_type":"code","source":["### df_2024.to_csv(\"my-mix-image-.csv\", index=False) # not used here and too large"],"metadata":{"papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"id":"pUL9NsECKn3J","executionInfo":{"status":"ok","timestamp":1724631864658,"user_tz":-120,"elapsed":4,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":95,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Esu11yA2Kn3K","executionInfo":{"status":"ok","timestamp":1724631864658,"user_tz":-120,"elapsed":4,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":95,"outputs":[]},{"cell_type":"code","source":["df_2024[['isic_id', 'target', 'preds']].to_csv(path_isic_data+\"df_2024_after prediction best loss.csv\", index=False)"],"metadata":{"papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"trusted":true,"id":"DvZxjZOBKn3K","executionInfo":{"status":"ok","timestamp":1724631865522,"user_tz":-120,"elapsed":867,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}}},"execution_count":96,"outputs":[]}]}