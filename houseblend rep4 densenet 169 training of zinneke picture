{"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"1NQUaub4W12nCMg5n-WsacO0D77dvXckv","timestamp":1724381970722},{"file_id":"1kgShMso2QgXf-5MhrHxSN2Jx86BlLK7v","timestamp":1724310293577},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/zinneke-picture-7dd8d4ea-01ff-419b-b2cd-d867d8d1d03f.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240811/auto/storage/goog4_request&X-Goog-Date=20240811T064721Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=53befc0568abf4b053465fdd0f09102daab4f43023a458d24b821ddc887dc7d96d0335a3c9c20f9d0c6c2031b8720070884b6a05c8045fd2df0540bcc40fc87453955bb665195119d289cea97cfc306e02f7ae391235b245530d8ee691658eb716c8c0cfbcdae32a84e99fa5f6b82a1c2e5f40e54df5c16ecb63f70411d9f1d0347caf26a03544b91afb9879e0b73c33addf2fe74dae0cfac503918408794cfa28769517bb4a1ca0a5b1fcd116e86318f3dcecbe370183407837a4dec0de31985e2fe2a5e094ce42e3d69ae415c2386d70ec21740b38203255ae8eb51f073b6698e4bec74c115ca4e8d6c0bee2432eec7697ff7675aa1833afbf0434e8ea1ec8","timestamp":1723358850760},{"file_id":"1G-FZ6NdOU-xVp7o4AQfrDByh60FsPqXU","timestamp":1722374812038},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/isic-2024-pytorch-training-effnet-b2-42f84861-6799-446a-b569-822d6e5a4149.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240726/auto/storage/goog4_request&X-Goog-Date=20240726T203743Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=02dda529bc77d43d996e66896c3bc2cfefad4ad73aee9b39d330ae1aa92c61fb00c0d33a1c469e59670d91594ef9acc31d55a18ede693a15a70633449660685bc0a86b7fbffd3978b9ed754f6a3a54e254ff21f501e3670ab298c1c18ddfc13a3640f44c340db11518a456632837fa4f37bf6bfa44111e0efbec927105fd5396d35965571fb7c83b6c0ddd79ac0ee389d058f93fac19e1f7961430df12083c932240b96caa0032a3f45ef8966b75731821ebb94b92c776b6ccc0af82d32fee00dcc9abe37e7aa23b73117d8db04606de97e89684585fca6c932d9d550a5eca820b4f15459bea44c9f58d95a603b608c47d57ac611289d4c372fdd4e384e3bad4","timestamp":1722026331852}]},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":63056,"databundleVersionId":9094797,"sourceType":"competition"},{"sourceId":8805041,"sourceType":"datasetVersion","datasetId":5295511},{"sourceId":8805074,"sourceType":"datasetVersion","datasetId":5295526},{"sourceId":8805104,"sourceType":"datasetVersion","datasetId":5295545},{"sourceId":9118579,"sourceType":"datasetVersion","datasetId":5504311},{"sourceId":9144856,"sourceType":"datasetVersion","datasetId":5523470},{"sourceId":9146933,"sourceType":"datasetVersion","datasetId":5525007},{"sourceId":3732,"sourceType":"modelInstanceVersion","modelInstanceId":2659,"modelId":312},{"sourceId":92232,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":77322,"modelId":101954}],"dockerImageVersionId":30747,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":4653.084709,"end_time":"2024-08-08T06:30:12.536858","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-08-08T05:12:39.452149","version":"2.5.0"},"widgets":{"application/vnd.jupyter.widget-state+json":{"29d822209ecd452586238d8bd055a70d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_f866f96700aa4435bfcf9e56ef314ff4","IPY_MODEL_850704eef6ba478789bf296c6b131868","IPY_MODEL_4386375f1a6648b89900950cb01e87f8"],"layout":"IPY_MODEL_f6af7986750941c2b093234b0e5cccc2"}},"f866f96700aa4435bfcf9e56ef314ff4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c92e6cf16dc44773be92c30fceb4603c","placeholder":"​","style":"IPY_MODEL_389dde8eb8344ba9800ef335d49ab646","value":"model.safetensors: 100%"}},"850704eef6ba478789bf296c6b131868":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_2ef4415a899a4bcfa3b842d2874ffbc5","max":57350342,"min":0,"orientation":"horizontal","style":"IPY_MODEL_f4cdab05b9aa4b9ca9c786ba467bb9e5","value":57350342}},"4386375f1a6648b89900950cb01e87f8":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_093f456daf4147a097381ab39d1e2744","placeholder":"​","style":"IPY_MODEL_77e4058a35904e328dbd9abae31d4d33","value":" 57.4M/57.4M [00:00&lt;00:00, 139MB/s]"}},"f6af7986750941c2b093234b0e5cccc2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c92e6cf16dc44773be92c30fceb4603c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"389dde8eb8344ba9800ef335d49ab646":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"2ef4415a899a4bcfa3b842d2874ffbc5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f4cdab05b9aa4b9ca9c786ba467bb9e5":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"093f456daf4147a097381ab39d1e2744":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"77e4058a35904e328dbd9abae31d4d33":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"ilRhTTgaX4OE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724447077010,"user_tz":-120,"elapsed":2210,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"cbf244c2-d516-484e-e4e5-b01626aef8d1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["# for colab\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5hzXdHCFPrFV"},"outputs":[],"source":["#path_isic_data = '/content/drive/MyDrive/Data/ISIC-2018/dup1-output-zinneke-picture-train-d169/'\n","path_isic_data = '/content/drive/MyDrive/Data/ISIC-2018/houseblend-rep4-output-zinneke-picture-train-d169/'"]},{"source":["\n","# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n","# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","\n","import os\n","import sys\n","from tempfile import NamedTemporaryFile\n","from urllib.request import urlopen\n","from urllib.parse import unquote, urlparse\n","from urllib.error import HTTPError\n","from zipfile import ZipFile\n","import tarfile\n","import shutil\n","\n","CHUNK_SIZE = 40960\n","DATA_SOURCE_MAPPING = 'isic-2024-challenge:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-competitions-data%2Fkaggle-v2%2F63056%2F9094797%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240822%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240822T093913Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D4968c298871e3fd63bd40ba7189c74f715552cf58c341cef1f82b95c2ac6f65ad943fd2521b6f3f791c4648d3ea626f3a0f67518c86f0ed8c5551a3658e64cac16fa76fb1a2f08a655660982e59c4433e30b5f0fea6f9f6c80993bf3af742ee303dd72b71c5a53cc9593926fd50778547af1e047045207d8aed006fd36f3044778dd9bd3537f5d577660b75cc267c251a4e2a341ff92463007bf87821678f1d4f53a8a4c9798977d0d949bf0a0c078c907384f2c8b3a50135f594bf1dd7d6f7c4e6ccd15c3f17e5507bd13cb4dd8e920b746e209116c5cf4567f5c4a5864f6c59a2dae8fead78f82e4b8dd46bf40d473014245066be365a34e7b8f4136616f6c,isic-2018-jpg-256x256-resized:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F5295511%2F8805041%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240822%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240822T093913Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D8b9598754a4c93ccd4f09e9f336aa8b0a3fca7dac7cf9a4a85dabbcd75610a601fa9a33420c3b3d6f76b31e48f83b44d76e6895407c3e4a4bdf004a06765a3d0de724ef5a8adba8908614138d8772f89017a9f721c55ba302f53cdbe2f9b26073f2b272a113d03fe89dadce146c67a35ab77a701099dad37463c09ebedf5fbe71facfa943fc9a23e59613d4aa0605b7714f3cf88bd202bbf4d653b91db5519cc174de38ae416077f3c6bd9a1bcc560df908f2a4f8bdfd0b0f1ef70a7db9add72e4530f4e4f91808c4047c9a1863c6d3e5edc4f169c8cc057600d096c5f9a17d72452c2ed819506d845aefc2bdb95d6746cc20c915d50eee291ac2597003d30d3,isic-2019-jpg-256x256-resized:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F5295526%2F8805074%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240822%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240822T093914Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D52fc60aaeb7eb941e193f3a4c90c5562532ce42d1b998013423f61a7fb24dfa27b8b25dc04acdbfcddd47ea62c1499470cd818274ff6586e0021755eb5564441ab4767633b922dddf1480b75777242a0ad5c3175e3245b05ab956c7b1c3d6c93ee636f9f686f4ac9634b5e206230242ef731a5d3f6b26bdcfc53f04c5acc189b7048876c69a944a9d23ba2416dabb641c32ab2448343ae5322f8651185bf90f6ee37225a6d0052e23ed66d4a788fe39a41fbb5e4ac48e030e8eea075687aad766ef0390bbe0e3cbe5afb0ba0b5dd713b4f0aab831a22b9a62ccc3a26d736176632dd94256a067e359fdd1e60d37cbe49d6a3bababa2a9f9728b07da2dda44e22,isic-2020-jpg-256x256-resized:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F5295545%2F8805104%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240822%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240822T093914Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D3995a0bef3f311b63bbb6afb52cda4601c2d26410574cc060506b6e56723862f38bd8b95609378a912c9ec0e66c8c1bed95d3deaf2bc137cc21ea4919514881d886355118256229f6b395be522bdd42aed95350154a993144d7ea01bce80f84e744cf4837561215b7d9ab95a0201c4747911f8bd78ba506560d805c03e4b979753fad1a97f0b04c0005412a9d59e1ebac3cf57d5f3120440224b700c569aad32411ea7a52a8f5191ee2682be512a02fbcd8d2ebdafe6e2b9451cba2ac39c7dbe41736d23d528e597775721666be90228be057a8fe99d1f5bb39ad8602dc7eeb0829823630c6665757c947e8336dac67c0fa2886b0fe3b5a23ed27f2fa9a9bf9b,tf-efficientnet/pytorch/tf-efficientnet-b3/1:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-models-data%2F2659%2F3732%2Fbundle%2Farchive.tar.gz%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240822%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240822T093914Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D26a6848c01e967dd1a9cb27d33985ab431325ccfe9d50de9fd4488753b818a1e7cf04f998815b277ac8d7c2d75d37dae1398cd3f519c2f8d8205641eb45133bdbb0b1c491ba3d9a9d9b5325fc478f436dfaf8e60b92ff131dc644012d93052bfe193822ab1f2342ed9528955c4a92d6ca35c35a10fb796f199412683017be3c9a4b6b983b7477bef32edd41cfc6c99e6fbc9c937cd51105b19025862e64d6e9a365cc17df84e0033f3156b1460301e270a76dd54f43c1c45ac9a1cd573753ba2a01ad1d4a9e9dbd88a653d1db9f0a2482124c95e1766a089b0f2aa6ceca7dff9151b295dcee9b0d59228fa7e78d3fab6ca462ee3bd6a5d0e1f429d7eaf52c8c6'\n","\n","KAGGLE_INPUT_PATH='/kaggle/input'\n","KAGGLE_WORKING_PATH='/kaggle/working'\n","KAGGLE_SYMLINK='kaggle'\n","\n","!umount /kaggle/input/ 2> /dev/null\n","shutil.rmtree('/kaggle/input', ignore_errors=True)\n","os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n","os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n","\n","try:\n","  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","try:\n","  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","\n","for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n","    directory, download_url_encoded = data_source_mapping.split(':')\n","    download_url = unquote(download_url_encoded)\n","    filename = urlparse(download_url).path\n","    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n","    try:\n","        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n","            total_length = fileres.headers['content-length']\n","            print(f'Downloading {directory}, {total_length} bytes compressed')\n","            dl = 0\n","            data = fileres.read(CHUNK_SIZE)\n","            while len(data) > 0:\n","                dl += len(data)\n","                tfile.write(data)\n","                done = int(50 * dl / int(total_length))\n","                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n","                sys.stdout.flush()\n","                data = fileres.read(CHUNK_SIZE)\n","            if filename.endswith('.zip'):\n","              with ZipFile(tfile) as zfile:\n","                zfile.extractall(destination_path)\n","            else:\n","              with tarfile.open(tfile.name) as tarfile:\n","                tarfile.extractall(destination_path)\n","            print(f'\\nDownloaded and uncompressed: {directory}')\n","    except HTTPError as e:\n","        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n","        continue\n","    except OSError as e:\n","        print(f'Failed to load {download_url} to path {destination_path}')\n","        continue\n","\n","print('Data source import complete.')\n"],"metadata":{"id":"G2zp8teZdFl6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724447568845,"user_tz":-120,"elapsed":321956,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"05847b65-d349-4b67-a37b-9c3a8484bb80"},"cell_type":"code","outputs":[{"output_type":"stream","name":"stdout","text":["Downloading isic-2024-challenge, 2148525604 bytes compressed\n","[==================================================] 2148525604 bytes downloaded\n","Downloaded and uncompressed: isic-2024-challenge\n","Downloading isic-2018-jpg-256x256-resized, 137798195 bytes compressed\n","[==================================================] 137798195 bytes downloaded\n","Downloaded and uncompressed: isic-2018-jpg-256x256-resized\n","Downloading isic-2019-jpg-256x256-resized, 466726618 bytes compressed\n","[==================================================] 466726618 bytes downloaded\n","Downloaded and uncompressed: isic-2019-jpg-256x256-resized\n","Downloading isic-2020-jpg-256x256-resized, 624178238 bytes compressed\n","[==================================================] 624178238 bytes downloaded\n","Downloaded and uncompressed: isic-2020-jpg-256x256-resized\n","Downloading tf-efficientnet/pytorch/tf-efficientnet-b3/1, 45614007 bytes compressed\n","[==================================================] 45614007 bytes downloaded\n","Downloaded and uncompressed: tf-efficientnet/pytorch/tf-efficientnet-b3/1\n","Data source import complete.\n"]}],"execution_count":null},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Note from the previous coder</h1></span>\n","This note book is forked from [here](https://www.kaggle.com/code/motono0223/isic-pytorch-training-baseline-image-only)\n","\n","Credit:\n","* https://www.kaggle.com/code/samu2505/isic-pytorchmodel-training\n","    * This notebook added images from past ISIC datasets and I used it to enlarge the size of positive cases\n","    \n","Future Improvements:\n","* I used EffNet_b3, and maybe other model could have better performance.\n","* The size of dataset is limited due to the computation power. if you have better machine, you could enlarge the dataset of training.\n","* Parameter finetuning (the epoch = 20 now).\n","* I only one fold out of five, which can be changed.\n","\n","Notebooks:\n","- Training notebook (This Notebook):\n","- [Inference notebook](https://www.kaggle.com/code/hugowjd/isic-2024-pytorch-inference-effnet-b2/)"],"metadata":{"id":"7nD0BWv5w4wX","papermill":{"duration":0.023962,"end_time":"2024-08-08T05:12:42.1117","exception":false,"start_time":"2024-08-08T05:12:42.087738","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":["# Code origin\n","https://www.google.com/url?q=https%3A%2F%2Fwww.kaggle.com%2Fcode%2Fmotono0223%2Fisic-pytorch-training-baseline-image-only\n","\n","Main modification: generate the CVS my-mix-image-small.csv and my-mix-image.csv that will be used for further research."],"metadata":{"papermill":{"duration":0.022599,"end_time":"2024-08-08T05:12:42.159021","exception":false,"start_time":"2024-08-08T05:12:42.136422","status":"completed"},"tags":[],"id":"H0UfPbdDMQwX"}},{"cell_type":"markdown","source":["## <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 50px 50px;\">Import Required Libraries</h1></span>"],"metadata":{"id":"YtCrXA2lw4wY","papermill":{"duration":0.022687,"end_time":"2024-08-08T05:25:13.740352","exception":false,"start_time":"2024-08-08T05:25:13.717665","status":"completed"},"tags":[]}},{"cell_type":"code","source":["!pip install timm"],"metadata":{"id":"uCG-wq4HyZFn","papermill":{"duration":12.051659,"end_time":"2024-08-08T05:25:39.549708","exception":false,"start_time":"2024-08-08T05:25:27.498049","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:13:47.600581Z","iopub.execute_input":"2024-08-10T08:13:47.600994Z","iopub.status.idle":"2024-08-10T08:14:24.003603Z","shell.execute_reply.started":"2024-08-10T08:13:47.600962Z","shell.execute_reply":"2024-08-10T08:14:24.002068Z"},"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724447639527,"user_tz":-120,"elapsed":70702,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"6013ffb0-70c1-4aeb-a944-3edc292069c8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting timm\n","  Downloading timm-1.0.8-py3-none-any.whl.metadata (53 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/53.8 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m53.8/53.8 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from timm) (2.3.1+cu121)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (from timm) (0.18.1+cu121)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from timm) (6.0.2)\n","Requirement already satisfied: huggingface_hub in /usr/local/lib/python3.10/dist-packages (from timm) (0.23.5)\n","Requirement already satisfied: safetensors in /usr/local/lib/python3.10/dist-packages (from timm) (0.4.4)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (3.15.4)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (2024.6.1)\n","Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (24.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (2.32.3)\n","Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (4.66.5)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (4.12.2)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->timm) (1.13.2)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->timm) (3.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (3.1.4)\n","Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch->timm)\n","  Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-runtime-cu12==12.1.105 (from torch->timm)\n","  Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.1.105 (from torch->timm)\n","  Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cudnn-cu12==8.9.2.26 (from torch->timm)\n","  Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cublas-cu12==12.1.3.1 (from torch->timm)\n","  Using cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cufft-cu12==11.0.2.54 (from torch->timm)\n","  Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-curand-cu12==10.3.2.106 (from torch->timm)\n","  Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cusolver-cu12==11.4.5.107 (from torch->timm)\n","  Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cusparse-cu12==12.1.0.106 (from torch->timm)\n","  Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-nccl-cu12==2.20.5 (from torch->timm)\n","  Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl.metadata (1.8 kB)\n","Collecting nvidia-nvtx-cu12==12.1.105 (from torch->timm)\n","  Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.7 kB)\n","Requirement already satisfied: triton==2.3.1 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (2.3.1)\n","Collecting nvidia-nvjitlink-cu12 (from nvidia-cusolver-cu12==11.4.5.107->torch->timm)\n","  Using cached nvidia_nvjitlink_cu12-12.6.20-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torchvision->timm) (1.26.4)\n","Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision->timm) (9.4.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->timm) (2.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub->timm) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub->timm) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub->timm) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub->timm) (2024.7.4)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->timm) (1.3.0)\n","Downloading timm-1.0.8-py3-none-any.whl (2.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.3/2.3 MB\u001b[0m \u001b[31m42.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl (410.6 MB)\n","Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n","Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n","Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n","Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n","Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl (121.6 MB)\n","Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl (56.5 MB)\n","Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl (124.2 MB)\n","Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl (196.0 MB)\n","Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl (176.2 MB)\n","Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (99 kB)\n","Using cached nvidia_nvjitlink_cu12-12.6.20-py3-none-manylinux2014_x86_64.whl (19.7 MB)\n","Installing collected packages: nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12, timm\n","Successfully installed nvidia-cublas-cu12-12.1.3.1 nvidia-cuda-cupti-cu12-12.1.105 nvidia-cuda-nvrtc-cu12-12.1.105 nvidia-cuda-runtime-cu12-12.1.105 nvidia-cudnn-cu12-8.9.2.26 nvidia-cufft-cu12-11.0.2.54 nvidia-curand-cu12-10.3.2.106 nvidia-cusolver-cu12-11.4.5.107 nvidia-cusparse-cu12-12.1.0.106 nvidia-nccl-cu12-2.20.5 nvidia-nvjitlink-cu12-12.6.20 nvidia-nvtx-cu12-12.1.105 timm-1.0.8\n"]}]},{"cell_type":"code","source":["import os\n","import gc\n","import cv2\n","import math\n","import copy\n","import time\n","import random\n","import glob\n","from pathlib import Path\n","import h5py\n","from PIL import Image\n","from io import BytesIO\n","\n","# For data manipulation\n","import numpy as np\n","import pandas as pd\n","\n","# Pytorch Imports\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","from torch.optim import lr_scheduler\n","from torch.utils.data import Dataset, DataLoader\n","from torch.cuda import amp\n","import torchvision\n","#from torcheval.metrics.functional import binary_auroc\n","\n","# Utils\n","import joblib\n","from tqdm import tqdm\n","from collections import defaultdict\n","\n","# Sklearn Imports\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.model_selection import StratifiedKFold, StratifiedGroupKFold, train_test_split\n","from sklearn.metrics import auc, roc_curve\n","\n","# For Image Models\n","import timm\n","\n","# Albumentations for augmentations\n","import albumentations as A\n","from albumentations.pytorch import ToTensorV2\n","\n","# For colored terminal text\n","# from colorama import Fore, Back, Style\n","# b_ = Fore.BLUE\n","# sr_ = Style.RESET_ALL\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","# For descriptive error messages\n","os.environ['CUDA_LAUNCH_BLOCKING'] = \"1\"\n","\n","# Plot package\n","import PIL\n","\n","from matplotlib import pyplot as plt"],"metadata":{"id":"kTaXjDdMw4wZ","papermill":{"duration":8.951626,"end_time":"2024-08-08T05:25:48.525949","exception":false,"start_time":"2024-08-08T05:25:39.574323","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:24.005893Z","iopub.execute_input":"2024-08-10T08:14:24.006449Z","iopub.status.idle":"2024-08-10T08:14:32.739088Z","shell.execute_reply.started":"2024-08-10T08:14:24.006399Z","shell.execute_reply":"2024-08-10T08:14:32.737791Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Configuration</h1></span>"],"metadata":{"id":"-o8DZUCPw4wZ","papermill":{"duration":0.023748,"end_time":"2024-08-08T05:25:48.574482","exception":false,"start_time":"2024-08-08T05:25:48.550734","status":"completed"},"tags":[]}},{"cell_type":"code","source":["CONFIG = {\n","    \"seed\": 42,\n","    \"epochs\": 10,\n","    \"img_size\": 224, # for b0 # 288, # was 384,\n","    #\"model_name\": \"tf_efficientnet_b3_ns\",\n","    \"model_name\": \"densenet169.tv_in1k\",\n","    #\"checkpoint_path\" : \"/kaggle/input/tf-efficientnet/pytorch/tf-efficientnet-b3/1/tf_efficientnet_b3_aa-84b4657e.pth\",\n","    #\"checkpoint_path\" : \"/kaggle/input/pdc_efficientnet/pytorch/default/1/tf_efficientnet_b0_aa-827b6e33.pth\",\n","    \"train_batch_size\": 32,\n","    \"valid_batch_size\": 64,\n","    \"learning_rate\": 5e-5,\n","    \"scheduler\": 'CosineAnnealingLR',\n","    \"min_lr\": 5e-7,\n","    \"T_max\": 500,\n","    \"weight_decay\": 1e-6,\n","    \"fold\" : 0,\n","    \"n_fold\": 5,\n","    \"n_accumulate\": 1,\n","    \"replicate_pos\" : 4,\n","    \"target_ratio\" : 4,\n","    \"device\": torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\"),\n","}"],"metadata":{"id":"qpYc_FJuw4wZ","papermill":{"duration":0.111643,"end_time":"2024-08-08T05:25:48.751479","exception":false,"start_time":"2024-08-08T05:25:48.639836","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.74065Z","iopub.execute_input":"2024-08-10T08:14:32.741317Z","iopub.status.idle":"2024-08-10T08:14:32.748966Z","shell.execute_reply.started":"2024-08-10T08:14:32.741281Z","shell.execute_reply":"2024-08-10T08:14:32.747604Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["CONFIG['device']"],"metadata":{"id":"mvWLHjo5w4wa","papermill":{"duration":0.032987,"end_time":"2024-08-08T05:25:48.808791","exception":false,"start_time":"2024-08-08T05:25:48.775804","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.752401Z","iopub.execute_input":"2024-08-10T08:14:32.752802Z","iopub.status.idle":"2024-08-10T08:14:32.769579Z","shell.execute_reply.started":"2024-08-10T08:14:32.752765Z","shell.execute_reply":"2024-08-10T08:14:32.768053Z"},"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724447658849,"user_tz":-120,"elapsed":7,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"3aa678f6-791b-4f14-9675-8cc81dd1301b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["device(type='cuda', index=0)"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 50px 50px;\">Set Seed for Reproducibility</h2></span>"],"metadata":{"id":"h_SBRfZUw4wa","papermill":{"duration":0.024232,"end_time":"2024-08-08T05:25:48.857606","exception":false,"start_time":"2024-08-08T05:25:48.833374","status":"completed"},"tags":[]}},{"cell_type":"code","source":["def set_seed(seed=42):\n","    '''Sets the seed of the entire notebook so results are the same every time we run.\n","    This is for REPRODUCIBILITY.'''\n","    np.random.seed(seed)\n","    if torch.cuda.is_available():\n","        torch.cuda.manual_seed(seed)\n","        torch.cuda.manual_seed_all(seed)\n","        torch.backends.cudnn.deterministic = False\n","        torch.backends.cudnn.benchmark = True\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    print(f\"Seeding done ...\")\n","\n","def flush():\n","    gc.collect()\n","    if torch.cuda.is_available():\n","        torch.cuda.empty_cache()\n","        torch.cuda.reset_peak_memory_stats()\n","set_seed(CONFIG['seed'])"],"metadata":{"id":"AYLWOhWOw4wa","papermill":{"duration":0.036861,"end_time":"2024-08-08T05:25:48.918576","exception":false,"start_time":"2024-08-08T05:25:48.881715","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.771413Z","iopub.execute_input":"2024-08-10T08:14:32.77187Z","iopub.status.idle":"2024-08-10T08:14:32.784364Z","shell.execute_reply.started":"2024-08-10T08:14:32.771797Z","shell.execute_reply":"2024-08-10T08:14:32.782879Z"},"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724447658849,"user_tz":-120,"elapsed":5,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"cfbd8a3f-858c-41f9-b208-ea034782cab9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Seeding done ...\n"]}]},{"cell_type":"code","source":["ROOT_DIR = \"/kaggle/input/isic-2024-challenge\"\n","TRAIN_DIR = f'{ROOT_DIR}/train-image/image'\n","TEST_DIR = f'{ROOT_DIR}/test-image.hdf5/image'"],"metadata":{"id":"8PVUViMKw4wb","papermill":{"duration":0.030454,"end_time":"2024-08-08T05:25:48.973101","exception":false,"start_time":"2024-08-08T05:25:48.942647","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.78596Z","iopub.execute_input":"2024-08-10T08:14:32.786652Z","iopub.status.idle":"2024-08-10T08:14:32.800992Z","shell.execute_reply.started":"2024-08-10T08:14:32.786604Z","shell.execute_reply":"2024-08-10T08:14:32.799684Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["TEST_CSV = f'{ROOT_DIR}/test-metadata.csv'\n","TEST_HDF = f'{ROOT_DIR}/test-image.hdf5'\n","SAMPLE = f'{ROOT_DIR}/sample_submission.csv'"],"metadata":{"papermill":{"duration":0.030768,"end_time":"2024-08-08T05:25:49.028068","exception":false,"start_time":"2024-08-08T05:25:48.9973","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.802786Z","iopub.execute_input":"2024-08-10T08:14:32.803317Z","iopub.status.idle":"2024-08-10T08:14:32.813981Z","shell.execute_reply.started":"2024-08-10T08:14:32.803272Z","shell.execute_reply":"2024-08-10T08:14:32.812716Z"},"trusted":true,"id":"j0e1qEAKMQwb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_train_file_path(image_id):\n","    return f\"{TRAIN_DIR}/{image_id}.jpg\""],"metadata":{"id":"b4pt0IQKw4wb","papermill":{"duration":0.030276,"end_time":"2024-08-08T05:25:49.082535","exception":false,"start_time":"2024-08-08T05:25:49.052259","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.815577Z","iopub.execute_input":"2024-08-10T08:14:32.816013Z","iopub.status.idle":"2024-08-10T08:14:32.825882Z","shell.execute_reply.started":"2024-08-10T08:14:32.81598Z","shell.execute_reply":"2024-08-10T08:14:32.824605Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# not used\n","#def get_test_file_path(image_id):\n","    #return f\"{TEST_DIR}/{image_id}.jpg\""],"metadata":{"papermill":{"duration":0.031644,"end_time":"2024-08-08T05:25:49.138414","exception":false,"start_time":"2024-08-08T05:25:49.10677","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.827332Z","iopub.execute_input":"2024-08-10T08:14:32.827722Z","iopub.status.idle":"2024-08-10T08:14:32.837018Z","shell.execute_reply.started":"2024-08-10T08:14:32.827692Z","shell.execute_reply":"2024-08-10T08:14:32.835572Z"},"trusted":true,"id":"pLnZ_OduMQwb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# <h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Read the Data</h1>"],"metadata":{"id":"C6sfwVEJw4wb","papermill":{"duration":0.024653,"end_time":"2024-08-08T05:25:49.187255","exception":false,"start_time":"2024-08-08T05:25:49.162602","status":"completed"},"tags":[]}},{"cell_type":"code","source":["train_images = sorted(glob.glob(f\"{TRAIN_DIR}/*.jpg\"))"],"metadata":{"id":"CsRI71I9w4wb","papermill":{"duration":1.838038,"end_time":"2024-08-08T05:25:51.049596","exception":false,"start_time":"2024-08-08T05:25:49.211558","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#test_images = sorted(glob.glob(f\"{TEST_DIR}/*.jpg\"))"],"metadata":{"papermill":{"duration":0.031198,"end_time":"2024-08-08T05:25:51.105596","exception":false,"start_time":"2024-08-08T05:25:51.074398","status":"completed"},"tags":[],"trusted":true,"id":"gv9p3frlMQwc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Read past isic competition data\n","check_path = lambda p: os.path.exists(p)\n","\n","# 2020\n","DATA_PATH_2020 = Path(\"/kaggle/input/isic-2020-jpg-256x256-resized\")\n","get_image_path_2020 = lambda p: os.path.join(f'{str(DATA_PATH_2020/\"train-image/image\")}/{p}.jpg')\n","df_train_2020 = pd.read_csv(DATA_PATH_2020/\"train-metadata.csv\")\n","df_positive_2020 = df_train_2020[df_train_2020[\"target\"] == 1].reset_index(drop=True)\n","df_positive_2020['file_path'] = df_positive_2020[\"isic_id\"].apply(get_image_path_2020)\n","df_positive_2020['exists'] = df_positive_2020['file_path'].apply(check_path)\n","df_positive_2020 = df_positive_2020[df_positive_2020['exists'] == True].reset_index()\n","# 2019\n","DATA_PATH_2019 = Path(\"/kaggle/input/isic-2019-jpg-256x256-resized\")\n","get_image_path_2019 = lambda p: os.path.join(f'{str(DATA_PATH_2019/\"train-image/image\")}/{p}.jpg')\n","df_train_2019 = pd.read_csv(DATA_PATH_2019/\"train-metadata.csv\")\n","df_positive_2019 = df_train_2019[df_train_2019[\"target\"] == 1].reset_index(drop=True)\n","df_positive_2019['file_path'] = df_positive_2019[\"isic_id\"].apply(get_image_path_2019)\n","df_positive_2019['exists'] = df_positive_2019['file_path'].apply(check_path)\n","df_positive_2019 = df_positive_2019[df_positive_2019['exists'] == True].reset_index()\n","# 2018\n","DATA_PATH_2018 = Path(\"/kaggle/input/isic-2018-jpg-256x256-resized\")\n","get_image_path_2018 = lambda p: os.path.join(f'{str(DATA_PATH_2018/\"train-image/image\")}/{p}.jpg')\n","df_train_2018 = pd.read_csv(DATA_PATH_2018/\"train-metadata.csv\")\n","df_positive_2018 = df_train_2018[df_train_2018[\"target\"] == 1].reset_index(drop=True)\n","df_positive_2018['file_path'] = df_positive_2018[\"isic_id\"].apply(get_image_path_2018)\n","df_positive_2018['exists'] = df_positive_2018['file_path'].apply(check_path)\n","df_positive_2018 = df_positive_2018[df_positive_2018['exists'] == True].reset_index()"],"metadata":{"id":"-kBc1TkMw4wc","papermill":{"duration":9.34957,"end_time":"2024-08-08T05:26:00.48035","exception":false,"start_time":"2024-08-08T05:25:51.13078","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["past_df_positive = pd.concat([df_positive_2018, df_positive_2019, df_positive_2020], axis=0)\n","past_df_positive.head(3)\n","print(f'Number of positive cases: {past_df_positive.shape[0]}')"],"metadata":{"id":"_6d96Py1w4wc","papermill":{"duration":0.034312,"end_time":"2024-08-08T05:26:00.539436","exception":false,"start_time":"2024-08-08T05:26:00.505124","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724447661315,"user_tz":-120,"elapsed":4,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"020f8527-e860-4299-a25b-dfeabd33c83c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of positive cases: 5768\n"]}]},{"cell_type":"code","source":["selected_cols = ['isic_id', 'target', 'file_path', 'patient_id']\n","\n","df_now = pd.read_csv(f\"{ROOT_DIR}/train-metadata.csv\")\n","print(\"        df.size, # of positive cases\")\n","print(\"original>\", df_now.shape[0], df_now.target.sum())\n","\n","# augment df\n","if CONFIG[\"replicate_pos\"] >= 2:\n","  df_now = pd.concat([df_now] * CONFIG[\"replicate_pos\"]).reset_index(drop=True)\n","\n","# Positive cases\n","df_positive = df_now[df_now[\"target\"] == 1].reset_index(drop=True)\n","df_positive['file_path'] = df_positive['isic_id'].apply(get_train_file_path)\n","df_positive = pd.concat([df_positive[selected_cols], past_df_positive[selected_cols]], axis = 0).reset_index(drop=True)\n","\n","# Negative cases\n","df_negative = df_now[df_now[\"target\"] == 0].reset_index(drop=True)\n","df_negative = df_negative.sample(frac=1).iloc[:df_positive.shape[0]*CONFIG[\"target_ratio\"], :]\n","df_negative['file_path'] = df_negative['isic_id'].apply(get_train_file_path)\n","df_negative = df_negative[selected_cols]\n","df_negative = df_negative[ df_negative[\"file_path\"].isin(train_images) ]\n","\n","df = pd.concat([df_positive, df_negative]).reset_index(drop=True)\n","print(\"filtered>\", df.shape[0], df.target.sum())\n","\n","df.head(3)"],"metadata":{"id":"jis04ERxMH9A","papermill":{"duration":7.732103,"end_time":"2024-08-08T05:26:08.295596","exception":false,"start_time":"2024-08-08T05:26:00.563493","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1724447695684,"user_tz":-120,"elapsed":34371,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"d50abe8f-5ce6-4ac8-e434-5a4008c235da"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["        df.size, # of positive cases\n","original> 401059 393\n","filtered> 36700 7340.0\n"]},{"output_type":"execute_result","data":{"text/plain":["        isic_id  target                                          file_path  \\\n","0  ISIC_0082829     1.0  /kaggle/input/isic-2024-challenge/train-image/...   \n","1  ISIC_0096034     1.0  /kaggle/input/isic-2024-challenge/train-image/...   \n","2  ISIC_0104229     1.0  /kaggle/input/isic-2024-challenge/train-image/...   \n","\n","   patient_id  \n","0  IP_3249371  \n","1  IP_6723298  \n","2  IP_9057861  "],"text/html":["\n","  <div id=\"df-ca23b680-5c07-43b8-b267-dcc313473458\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>isic_id</th>\n","      <th>target</th>\n","      <th>file_path</th>\n","      <th>patient_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ISIC_0082829</td>\n","      <td>1.0</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","      <td>IP_3249371</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ISIC_0096034</td>\n","      <td>1.0</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","      <td>IP_6723298</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ISIC_0104229</td>\n","      <td>1.0</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","      <td>IP_9057861</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca23b680-5c07-43b8-b267-dcc313473458')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ca23b680-5c07-43b8-b267-dcc313473458 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ca23b680-5c07-43b8-b267-dcc313473458');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bd947fa3-df78-4e01-b7c8-821ecba65e0f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bd947fa3-df78-4e01-b7c8-821ecba65e0f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bd947fa3-df78-4e01-b7c8-821ecba65e0f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 36700,\n  \"fields\": [\n    {\n      \"column\": \"isic_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 34216,\n        \"samples\": [\n          \"ISIC_7285044\",\n          \"ISIC_2209907\",\n          \"ISIC_4012215\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.40000544970265095,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"file_path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 34707,\n        \"samples\": [\n          \"/kaggle/input/isic-2024-challenge/train-image/image/ISIC_3106721.jpg\",\n          \"/kaggle/input/isic-2024-challenge/train-image/image/ISIC_5352762.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"patient_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6571,\n        \"samples\": [\n          \"dummy_18517\",\n          \"dummy_18690\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["CONFIG['T_max'] = df.shape[0] * (CONFIG[\"n_fold\"]-1) * CONFIG['epochs'] // CONFIG['train_batch_size'] // CONFIG[\"n_fold\"]\n","CONFIG['T_max']"],"metadata":{"id":"SxHsB8bMw4wc","papermill":{"duration":0.033653,"end_time":"2024-08-08T05:26:08.354478","exception":false,"start_time":"2024-08-08T05:26:08.320825","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724447695684,"user_tz":-120,"elapsed":14,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"0318fc63-1ac6-40a9-de6b-506fce47ff83"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9175"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["# Read the Test Data"],"metadata":{"papermill":{"duration":0.024544,"end_time":"2024-08-08T05:26:08.403751","exception":false,"start_time":"2024-08-08T05:26:08.379207","status":"completed"},"tags":[],"id":"qGBoKCJPMQwd"}},{"cell_type":"code","source":["class ISICDataset_for_Test(Dataset):\n","    def __init__(self, df, file_hdf, transforms=None):\n","        self.df = df\n","        self.fp_hdf = h5py.File(file_hdf, mode=\"r\")\n","        self.isic_ids = df['isic_id'].values\n","        self.targets = df['target'].values\n","        self.transforms = transforms\n","\n","    def __len__(self):\n","        return len(self.isic_ids)\n","\n","    def __getitem__(self, index):\n","        isic_id = self.isic_ids[index]\n","        img = np.array( Image.open(BytesIO(self.fp_hdf[isic_id][()])) )\n","        target = self.targets[index]\n","\n","        if self.transforms:\n","            img = self.transforms(image=img)[\"image\"]\n","\n","        return {\n","            'image': img,\n","            'target': target,\n","        }"],"metadata":{"papermill":{"duration":0.035088,"end_time":"2024-08-08T05:26:08.463388","exception":false,"start_time":"2024-08-08T05:26:08.4283","status":"completed"},"tags":[],"trusted":true,"id":"lO9Py-oXMQwd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load submission data\n","subm_data = pd.read_csv(TEST_CSV)\n","subm_data['target'] = 0 # dummy\n","display(subm_data.head())"],"metadata":{"papermill":{"duration":0.054824,"end_time":"2024-08-08T05:26:08.543121","exception":false,"start_time":"2024-08-08T05:26:08.488297","status":"completed"},"tags":[],"trusted":true,"id":"7bV643a2MQwd","colab":{"base_uri":"https://localhost:8080/","height":332},"executionInfo":{"status":"ok","timestamp":1724447695684,"user_tz":-120,"elapsed":10,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"7e18154b-e109-46f2-fc50-abaaa1f59d71"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["        isic_id  patient_id  age_approx     sex anatom_site_general  \\\n","0  ISIC_0015657  IP_6074337        45.0    male     posterior torso   \n","1  ISIC_0015729  IP_1664139        35.0  female     lower extremity   \n","2  ISIC_0015740  IP_7142616        65.0    male     posterior torso   \n","\n","   clin_size_long_diam_mm          image_type tbp_tile_type  tbp_lv_A  \\\n","0                    2.70  TBP tile: close-up        3D: XP  22.80433   \n","1                    2.52  TBP tile: close-up        3D: XP  16.64867   \n","2                    3.16  TBP tile: close-up        3D: XP  24.25384   \n","\n","   tbp_lv_Aext  ...  tbp_lv_stdL  tbp_lv_stdLExt  tbp_lv_symm_2axis  \\\n","0    20.007270  ...     1.281532        2.299935           0.479339   \n","1     9.657964  ...     1.271940        2.011223           0.426230   \n","2    19.937380  ...     1.080308        2.705857           0.366071   \n","\n","   tbp_lv_symm_2axis_angle   tbp_lv_x     tbp_lv_y    tbp_lv_z  \\\n","0                       20 -155.06510  1511.222000  113.980100   \n","1                       25 -112.36924   629.535889  -15.019287   \n","2                      110  -84.29282  1303.978000  -28.576050   \n","\n","                                         attribution  copyright_license  \\\n","0             Memorial Sloan Kettering Cancer Center              CC-BY   \n","1  Frazer Institute, The University of Queensland...              CC-BY   \n","2                                        FNQH Cairns              CC-BY   \n","\n","   target  \n","0       0  \n","1       0  \n","2       0  \n","\n","[3 rows x 45 columns]"],"text/html":["\n","  <div id=\"df-8b8404e2-d129-4191-b480-48063861cc0a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>isic_id</th>\n","      <th>patient_id</th>\n","      <th>age_approx</th>\n","      <th>sex</th>\n","      <th>anatom_site_general</th>\n","      <th>clin_size_long_diam_mm</th>\n","      <th>image_type</th>\n","      <th>tbp_tile_type</th>\n","      <th>tbp_lv_A</th>\n","      <th>tbp_lv_Aext</th>\n","      <th>...</th>\n","      <th>tbp_lv_stdL</th>\n","      <th>tbp_lv_stdLExt</th>\n","      <th>tbp_lv_symm_2axis</th>\n","      <th>tbp_lv_symm_2axis_angle</th>\n","      <th>tbp_lv_x</th>\n","      <th>tbp_lv_y</th>\n","      <th>tbp_lv_z</th>\n","      <th>attribution</th>\n","      <th>copyright_license</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ISIC_0015657</td>\n","      <td>IP_6074337</td>\n","      <td>45.0</td>\n","      <td>male</td>\n","      <td>posterior torso</td>\n","      <td>2.70</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>22.80433</td>\n","      <td>20.007270</td>\n","      <td>...</td>\n","      <td>1.281532</td>\n","      <td>2.299935</td>\n","      <td>0.479339</td>\n","      <td>20</td>\n","      <td>-155.06510</td>\n","      <td>1511.222000</td>\n","      <td>113.980100</td>\n","      <td>Memorial Sloan Kettering Cancer Center</td>\n","      <td>CC-BY</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ISIC_0015729</td>\n","      <td>IP_1664139</td>\n","      <td>35.0</td>\n","      <td>female</td>\n","      <td>lower extremity</td>\n","      <td>2.52</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>16.64867</td>\n","      <td>9.657964</td>\n","      <td>...</td>\n","      <td>1.271940</td>\n","      <td>2.011223</td>\n","      <td>0.426230</td>\n","      <td>25</td>\n","      <td>-112.36924</td>\n","      <td>629.535889</td>\n","      <td>-15.019287</td>\n","      <td>Frazer Institute, The University of Queensland...</td>\n","      <td>CC-BY</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ISIC_0015740</td>\n","      <td>IP_7142616</td>\n","      <td>65.0</td>\n","      <td>male</td>\n","      <td>posterior torso</td>\n","      <td>3.16</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>24.25384</td>\n","      <td>19.937380</td>\n","      <td>...</td>\n","      <td>1.080308</td>\n","      <td>2.705857</td>\n","      <td>0.366071</td>\n","      <td>110</td>\n","      <td>-84.29282</td>\n","      <td>1303.978000</td>\n","      <td>-28.576050</td>\n","      <td>FNQH Cairns</td>\n","      <td>CC-BY</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 45 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b8404e2-d129-4191-b480-48063861cc0a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8b8404e2-d129-4191-b480-48063861cc0a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8b8404e2-d129-4191-b480-48063861cc0a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f40fd1d8-e12f-4727-945c-1810ef5d909e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f40fd1d8-e12f-4727-945c-1810ef5d909e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f40fd1d8-e12f-4727-945c-1810ef5d909e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{}}]},{"cell_type":"code","source":["#subm_data['file_path'] = subm_data['isic_id'].apply(get_test_file_path)\n","#subm_data['target'] = 0 # dummy\n","#subm_data = subm_data[subm_data[\"file_path\"].isin(test_images) ].reset_index(drop=True)\n","#subm_data"],"metadata":{"id":"yKwKqTO0PrFU","papermill":{"duration":0.030842,"end_time":"2024-08-08T05:26:08.599196","exception":false,"start_time":"2024-08-08T05:26:08.568354","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_sub = pd.read_csv(SAMPLE)\n","df_sub"],"metadata":{"papermill":{"duration":0.047348,"end_time":"2024-08-08T05:26:08.671361","exception":false,"start_time":"2024-08-08T05:26:08.624013","status":"completed"},"tags":[],"trusted":true,"id":"Bq5lhxcxMQwd","colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"status":"ok","timestamp":1724447695685,"user_tz":-120,"elapsed":10,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"7013d67b-e24c-4a0a-c505-200da4d86676"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        isic_id  target\n","0  ISIC_0015657     0.3\n","1  ISIC_0015729     0.3\n","2  ISIC_0015740     0.3"],"text/html":["\n","  <div id=\"df-4ee0ad87-84c9-4db8-aed6-baa39774ba3e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>isic_id</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ISIC_0015657</td>\n","      <td>0.3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ISIC_0015729</td>\n","      <td>0.3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ISIC_0015740</td>\n","      <td>0.3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ee0ad87-84c9-4db8-aed6-baa39774ba3e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4ee0ad87-84c9-4db8-aed6-baa39774ba3e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4ee0ad87-84c9-4db8-aed6-baa39774ba3e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-522fcc43-e203-4f67-a7de-3460c47dd528\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-522fcc43-e203-4f67-a7de-3460c47dd528')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-522fcc43-e203-4f67-a7de-3460c47dd528 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_fc8bd5ff-b952-4ef5-92cb-ba7e2c1e229c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_sub')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_fc8bd5ff-b952-4ef5-92cb-ba7e2c1e229c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_sub');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_sub","summary":"{\n  \"name\": \"df_sub\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"isic_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"ISIC_0015657\",\n          \"ISIC_0015729\",\n          \"ISIC_0015740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.3,\n        \"max\": 0.3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":27}]},{"cell_type":"markdown","source":["## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 10px 10px;\">Display Images</h2></span>"],"metadata":{"id":"Sw5pjhBew4wc","papermill":{"duration":0.025494,"end_time":"2024-08-08T05:26:08.722073","exception":false,"start_time":"2024-08-08T05:26:08.696579","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":["## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 10px 10px;\">Target Plot</h2></span>\n","\n","I added positive cases from past data to enlarge the positive cases size."],"metadata":{"id":"h9uTIpTww4wd","papermill":{"duration":0.035256,"end_time":"2024-08-08T05:26:10.364464","exception":false,"start_time":"2024-08-08T05:26:10.329208","status":"completed"},"tags":[]}},{"cell_type":"code","source":["plt.subplot(141)\n","plt.title(\"Total Data - 2024\")\n","df_2024 = pd.read_csv(f\"{ROOT_DIR}/train-metadata.csv\")\n","df_2024['target'].value_counts().plot(kind='bar', figsize=(20,4))\n","plt.subplot(142)\n","plt.title(\"Data combined past positive cases\")\n","df['target'].value_counts().plot(kind='bar', figsize=(20,4))"],"metadata":{"id":"Bv_tIX-5w4wd","papermill":{"duration":4.938687,"end_time":"2024-08-08T05:26:15.33865","exception":false,"start_time":"2024-08-08T05:26:10.399963","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":435},"executionInfo":{"status":"ok","timestamp":1724447700628,"user_tz":-120,"elapsed":4953,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"d4d56d99-9fd9-46ea-df2c-b07f258cbb15"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: title={'center': 'Data combined past positive cases'}, xlabel='target'>"]},"metadata":{},"execution_count":28},{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 10px 10px;\">Create Folds</h2></span>"],"metadata":{"id":"MmkDFqTsw4wd","papermill":{"duration":0.035869,"end_time":"2024-08-08T05:26:15.411635","exception":false,"start_time":"2024-08-08T05:26:15.375766","status":"completed"},"tags":[]}},{"cell_type":"code","source":["sgkf = StratifiedGroupKFold(n_splits=CONFIG['n_fold']) # I don't why my SGKF doesn't work without patient_id\n","from sklearn.model_selection import KFold\n","kf = KFold(CONFIG['n_fold'], shuffle=True)\n","for fold, ( _, val_) in enumerate(kf.split(df)):\n","    df.loc[val_ , \"kfold\"] = int(fold)"],"metadata":{"id":"XsqGyhGAw4wd","papermill":{"duration":0.054535,"end_time":"2024-08-08T05:26:15.503399","exception":false,"start_time":"2024-08-08T05:26:15.448864","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 10px 10px;\">Dataset Class</h2></span>"],"metadata":{"id":"AcDzNUZjw4wd","papermill":{"duration":0.036328,"end_time":"2024-08-08T05:26:15.575784","exception":false,"start_time":"2024-08-08T05:26:15.539456","status":"completed"},"tags":[]}},{"cell_type":"code","source":["class ISICDataset_for_Train(Dataset):\n","    def __init__(self, df, transforms=None):\n","        self.df_positive = df[df[\"target\"] == 1].reset_index()\n","        self.df_negative = df[df[\"target\"] == 0].reset_index()\n","        self.file_names_positive = self.df_positive['file_path'].values\n","        self.file_names_negative = self.df_negative['file_path'].values\n","        self.targets_positive = self.df_positive['target'].values\n","        self.targets_negative = self.df_negative['target'].values\n","        self.transforms = transforms\n","\n","    def __len__(self): # seems it is not used\n","        return len(self.df_positive) * 4\n","\n","    def __getitem__(self, index):\n","        if random.random() <= 1./(CONFIG[\"target_ratio\"]+1) :       # modified, was 0.25:\n","            df = self.df_positive\n","            file_names = self.file_names_positive\n","            targets = self.targets_positive\n","        else:\n","            df = self.df_negative\n","            file_names = self.file_names_negative\n","            targets = self.targets_negative\n","        index = index % df.shape[0]\n","\n","        img_path = file_names[index]\n","        img = cv2.imread(img_path)\n","        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","        target = targets[index]\n","\n","        if self.transforms:\n","            img = self.transforms(image=img)[\"image\"]\n","\n","        return {\n","            'image': img,\n","            'target': target\n","        }\n","\n","class ISICDataset(Dataset):\n","    def __init__(self, df, transforms=None):\n","        self.df = df\n","        self.file_names = df['file_path'].values\n","        self.targets = df['target'].values\n","        self.transforms = transforms\n","\n","    def __len__(self):\n","        return len(self.df)\n","\n","    def __getitem__(self, index):\n","        img_path = self.file_names[index]\n","        img = cv2.imread(img_path)\n","        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","        target = self.targets[index]\n","\n","        if self.transforms:\n","            img = self.transforms(image=img)[\"image\"]\n","\n","        return {\n","            'image': img,\n","            'target': target\n","        }"],"metadata":{"id":"4AjH4W_Dw4wd","papermill":{"duration":0.051684,"end_time":"2024-08-08T05:26:15.663645","exception":false,"start_time":"2024-08-08T05:26:15.611961","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 20px 20px\">Augmentations</h2></span>"],"metadata":{"id":"sYnldaqHw4we","papermill":{"duration":0.036182,"end_time":"2024-08-08T05:26:15.736194","exception":false,"start_time":"2024-08-08T05:26:15.700012","status":"completed"},"tags":[]}},{"cell_type":"code","source":["data_transforms = {\n","    \"train\": A.Compose([\n","        A.Resize(CONFIG['img_size'], CONFIG['img_size']),\n","        A.RandomRotate90(p=0.5),\n","        A.Flip(p=0.5),\n","        A.Downscale(p=0.25),\n","        A.ShiftScaleRotate(shift_limit=0.1,\n","                           scale_limit=0.15,\n","                           rotate_limit=60,\n","                           p=0.5),\n","        A.HueSaturationValue(\n","                hue_shift_limit=0.2,\n","                sat_shift_limit=0.2,\n","                val_shift_limit=0.2,\n","                p=0.5\n","            ),\n","        A.RandomBrightnessContrast(\n","                brightness_limit=(-0.1,0.1),\n","                contrast_limit=(-0.1, 0.1),\n","                p=0.5\n","            ),\n","        A.Normalize(\n","                mean=[0.485, 0.456, 0.406],\n","                std=[0.229, 0.224, 0.225],\n","                max_pixel_value=255.0,\n","                p=1.0\n","            ),\n","        ToTensorV2()], p=1.),\n","\n","    \"valid\": A.Compose([\n","        A.Resize(CONFIG['img_size'], CONFIG['img_size']),\n","        A.Normalize(\n","                mean=[0.485, 0.456, 0.406],\n","                std=[0.229, 0.224, 0.225],\n","                max_pixel_value=255.0,\n","                p=1.0\n","            ),\n","        ToTensorV2()], p=1.)\n","}"],"metadata":{"id":"9HEG4I2jw4we","papermill":{"duration":0.048267,"end_time":"2024-08-08T05:26:15.82049","exception":false,"start_time":"2024-08-08T05:26:15.772223","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def prepare_loaders(df, fold):\n","    df_train = df[df.kfold <= CONFIG[\"n_fold\"]].reset_index(drop=True)\n","    df_valid = df[df.kfold == fold].reset_index(drop=True)\n","\n","    train_dataset = ISICDataset_for_Train(df_train, transforms=data_transforms[\"train\"])\n","    #train_dataset = ISICDataset(df_train, transforms=data_transforms[\"train\"])\n","    valid_dataset = ISICDataset(df_valid, transforms=data_transforms[\"valid\"])\n","\n","    train_loader = DataLoader(train_dataset, batch_size=CONFIG['train_batch_size'],\n","                              num_workers=2, shuffle=True, pin_memory=True, drop_last=True)\n","    valid_loader = DataLoader(valid_dataset, batch_size=CONFIG['valid_batch_size'],\n","                              num_workers=2, shuffle=False, pin_memory=True)\n","\n","    return train_loader, valid_loader"],"metadata":{"papermill":{"duration":0.045278,"end_time":"2024-08-08T05:26:17.579353","exception":false,"start_time":"2024-08-08T05:26:17.534075","status":"completed"},"tags":[],"trusted":true,"id":"WSXf4b-aXxYx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Create Model</h1></span>\n","## <span><h2 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px\">GeM Pooling</h2></span>"],"metadata":{"id":"MbPF2iWDw4we","papermill":{"duration":0.036009,"end_time":"2024-08-08T05:26:15.893321","exception":false,"start_time":"2024-08-08T05:26:15.857312","status":"completed"},"tags":[]}},{"cell_type":"code","source":["class GeM(nn.Module):\n","    def __init__(self, p=3, eps=1e-6):\n","        super(GeM, self).__init__()\n","        self.p = nn.Parameter(torch.ones(1)*p)\n","        self.eps = eps\n","\n","    def forward(self, x):\n","        return self.gem(x, p=self.p, eps=self.eps)\n","\n","    def gem(self, x, p=3, eps=1e-6):\n","        return F.avg_pool2d(x.clamp(min=eps).pow(p), (x.size(-2), x.size(-1))).pow(1./p)\n","\n","    def __repr__(self):\n","        return self.__class__.__name__ + \\\n","                '(' + 'p=' + '{:.4f}'.format(self.p.data.tolist()[0]) + \\\n","                ', ' + 'eps=' + str(self.eps) + ')'"],"metadata":{"papermill":{"duration":0.046031,"end_time":"2024-08-08T05:26:15.975332","exception":false,"start_time":"2024-08-08T05:26:15.929301","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.838762Z","iopub.execute_input":"2024-08-10T08:14:32.839237Z","iopub.status.idle":"2024-08-10T08:14:32.853298Z","shell.execute_reply.started":"2024-08-10T08:14:32.839181Z","shell.execute_reply":"2024-08-10T08:14:32.851694Z"},"trusted":true,"id":"RBjFD8cEC_1H"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class ISICModel(nn.Module):\n","    def __init__(self, model_name, num_classes=1, pretrained=True, checkpoint_path=None):\n","        super(ISICModel, self).__init__()\n","        self.model = timm.create_model(model_name, pretrained=pretrained, checkpoint_path=checkpoint_path)\n","        #self.model = timm.create_model(model_name, pretrained=pretrained)\n","        #self.model = torchvision.models.efficientnet_b0(weights = 'DEFAULT')\n","        #print(self.model)\n","        #for param in self.model.parameters():\n","            #param.requires_grad = False\n","        in_features = self.model.classifier.in_features\n","        self.model.classifier = nn.Identity()\n","        self.model.global_pool = nn.Identity()\n","        self.pooling = GeM()\n","        self.linear = nn.Linear(in_features, num_classes)\n","        self.sigmoid = nn.Sigmoid()\n","\n","    def forward(self, images):\n","        features = self.model(images)\n","        pooled_features = self.pooling(features).flatten(1)\n","        output = self.sigmoid(self.linear(pooled_features))\n","        return output\n","\n","torch.cuda.empty_cache()\n","#model = ISICModel(CONFIG['model_name'], checkpoint_path=CONFIG['checkpoint_path'])\n","model = ISICModel(CONFIG['model_name'])\n","model.to(CONFIG['device']);"],"metadata":{"papermill":{"duration":0.778828,"end_time":"2024-08-08T05:26:16.790309","exception":false,"start_time":"2024-08-08T05:26:16.011481","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-08-10T08:14:32.85486Z","iopub.execute_input":"2024-08-10T08:14:32.855392Z","iopub.status.idle":"2024-08-10T08:15:15.44899Z","shell.execute_reply.started":"2024-08-10T08:14:32.855346Z","shell.execute_reply":"2024-08-10T08:15:15.446589Z"},"trusted":true,"executionInfo":{"status":"ok","timestamp":1724447703013,"user_tz":-120,"elapsed":2400,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["29d822209ecd452586238d8bd055a70d","f866f96700aa4435bfcf9e56ef314ff4","850704eef6ba478789bf296c6b131868","4386375f1a6648b89900950cb01e87f8","f6af7986750941c2b093234b0e5cccc2","c92e6cf16dc44773be92c30fceb4603c","389dde8eb8344ba9800ef335d49ab646","2ef4415a899a4bcfa3b842d2874ffbc5","f4cdab05b9aa4b9ca9c786ba467bb9e5","093f456daf4147a097381ab39d1e2744","77e4058a35904e328dbd9abae31d4d33"]},"id":"fKg7qv4fC_1P","outputId":"4d654655-1e74-4136-f6cc-eeeba539ca82"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/57.4M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"29d822209ecd452586238d8bd055a70d"}},"metadata":{}}]},{"cell_type":"markdown","source":[],"metadata":{"id":"JRQTykkRC_1Q"}},{"cell_type":"code","source":["torch.save(model, path_isic_data+\"zinneke_picture\")"],"metadata":{"id":"JcvkMMZrC_1Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = torch.load(path_isic_data+\"zinneke_picture\")"],"metadata":{"id":"aJB1hl0VC_1Q"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px;\">Loss Function</h1></span>"],"metadata":{"id":"IVn8VUx5w4we","papermill":{"duration":0.036201,"end_time":"2024-08-08T05:26:16.863722","exception":false,"start_time":"2024-08-08T05:26:16.827521","status":"completed"},"tags":[]}},{"cell_type":"code","source":["def criterion(outputs, targets):\n","    return nn.BCELoss()(outputs, targets)"],"metadata":{"id":"Nu6OTZN4w4we","papermill":{"duration":0.043234,"end_time":"2024-08-08T05:26:16.943194","exception":false,"start_time":"2024-08-08T05:26:16.89996","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 20px 20px\">Training Function</h1></span>"],"metadata":{"id":"5NOg4hfjw4wf","papermill":{"duration":0.036219,"end_time":"2024-08-08T05:26:17.015518","exception":false,"start_time":"2024-08-08T05:26:16.979299","status":"completed"},"tags":[]}},{"cell_type":"code","source":["def aucskl(y_score, y_true):\n","    # using sklearn.metric functions: (1) roc_curve and (2) auc\n","    fpr, tpr, _ = roc_curve(y_true, y_score, sample_weight=None)\n","    auc_skl = auc(fpr, tpr)\n","    if np.isnan(auc_skl): auc_skl = 0.\n","    return auc_skl"],"metadata":{"trusted":true,"id":"xmLptocyMQwk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def train_one_epoch(model, optimizer, scheduler, dataloader, device, epoch):\n","    model.train()\n","\n","    dataset_size = 0\n","    running_loss = 0.0\n","    running_auroc  = 0.0\n","\n","    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n","    for step, data in bar:\n","        images = data['image'].to(device, dtype=torch.float)\n","        targets = data['target'].to(device, dtype=torch.float)\n","\n","        batch_size = images.size(0)\n","\n","        outputs = model(images).squeeze()\n","        loss = criterion(outputs, targets)\n","        loss = loss / CONFIG['n_accumulate']\n","\n","        loss.backward()\n","\n","        if (step + 1) % CONFIG['n_accumulate'] == 0:\n","            optimizer.step()\n","\n","            # zero the parameter gradients\n","            optimizer.zero_grad()\n","\n","            if scheduler is not None:\n","                scheduler.step()\n","\n","        #auroc = binary_auroc(input=outputs.squeeze(), target=targets).item()\n","        auroc = aucskl(outputs.detach().cpu().numpy(), targets.detach().cpu().numpy())\n","\n","        running_loss += (loss.item() * batch_size)\n","        running_auroc  += (auroc * batch_size)\n","        dataset_size += batch_size\n","\n","        epoch_loss = running_loss / dataset_size\n","        epoch_auroc = running_auroc / dataset_size\n","\n","        bar.set_postfix(Epoch=epoch, Train_Loss=epoch_loss, Train_Auroc=epoch_auroc,\n","                        LR=optimizer.param_groups[0]['lr'])\n","    gc.collect()\n","\n","    return epoch_loss, epoch_auroc"],"metadata":{"id":"23dFfm8_w4wf","papermill":{"duration":0.048582,"end_time":"2024-08-08T05:26:17.10052","exception":false,"start_time":"2024-08-08T05:26:17.051938","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 20px 20px\">Validation Function</h1></span>"],"metadata":{"id":"bKAub0lRw4wf","papermill":{"duration":0.03595,"end_time":"2024-08-08T05:26:17.172507","exception":false,"start_time":"2024-08-08T05:26:17.136557","status":"completed"},"tags":[]}},{"cell_type":"code","source":["@torch.inference_mode()\n","def valid_one_epoch(model, dataloader, device, epoch):\n","    model.eval()\n","\n","    dataset_size = 0\n","    running_loss = 0.0\n","    running_auroc = 0.0\n","\n","    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n","    for step, data in bar:\n","        images = data['image'].to(device, dtype=torch.float)\n","        targets = data['target'].to(device, dtype=torch.float)\n","\n","        batch_size = images.size(0)\n","        outputs = model(images).squeeze()\n","        loss = criterion(outputs, targets)\n","        #auroc = binary_auroc(input=outputs.squeeze(), target=targets).item()\n","        auroc = aucskl(outputs.detach().cpu().numpy(), targets.detach().cpu().numpy())\n","        running_loss += (loss.item() * batch_size)\n","        running_auroc  += (auroc * batch_size)\n","        dataset_size += batch_size\n","\n","        epoch_loss = running_loss / dataset_size\n","        epoch_auroc = running_auroc / dataset_size\n","\n","        bar.set_postfix(Epoch=epoch, Valid_Loss=epoch_loss, Valid_Auroc=epoch_auroc,\n","                        LR=optimizer.param_groups[0]['lr'])\n","    gc.collect()\n","\n","    return epoch_loss, epoch_auroc"],"metadata":{"id":"m7Pblwfow4wf","papermill":{"duration":0.048479,"end_time":"2024-08-08T05:26:17.257097","exception":false,"start_time":"2024-08-08T05:26:17.208618","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Training</h1></span>"],"metadata":{"id":"6I3RXTRqw4wg","papermill":{"duration":0.03628,"end_time":"2024-08-08T05:26:17.329919","exception":false,"start_time":"2024-08-08T05:26:17.293639","status":"completed"},"tags":[]}},{"cell_type":"code","source":["def run_training(model, optimizer, scheduler, device, num_epochs):\n","    if torch.cuda.is_available():\n","        print(\"[INFO] Using GPU: {}\\n\".format(torch.cuda.get_device_name()))\n","\n","    start = time.time()\n","    best_model_wts = copy.deepcopy(model.state_dict())\n","    best_epoch_auroc = -np.inf\n","    best_train_loss = np.inf\n","    history = defaultdict(list)\n","\n","    for epoch in range(1, num_epochs + 1):\n","        gc.collect()\n","        train_epoch_loss, train_epoch_auroc = train_one_epoch(model, optimizer, scheduler,\n","                                           dataloader=train_loader,\n","                                           device=CONFIG['device'], epoch=epoch)\n","\n","        val_epoch_loss, val_epoch_auroc = valid_one_epoch(model, valid_loader, device=CONFIG['device'],\n","                                         epoch=epoch)\n","\n","        history['Train Loss'].append(train_epoch_loss)\n","        history['Valid Loss'].append(val_epoch_loss)\n","        history['Train AUROC'].append(train_epoch_auroc)\n","        history['Valid AUROC'].append(val_epoch_auroc)\n","        history['lr'].append( scheduler.get_lr()[0] )\n","        if train_epoch_loss <= best_train_loss:\n","            print(f\"Train Loss Improved ({best_train_loss} ---> {train_epoch_loss})\")\n","            best_train_loss = train_epoch_loss\n","            #best_model_wts = copy.deepcopy(model.state_dict())\n","            PATH = \"best_TRAIN_LOSS_model.bin\"\n","            torch.save(model.state_dict(), PATH)\n","            # Save a model file from the current directory\n","            print(f\"Model Saved\")\n","\n","        if best_epoch_auroc <= train_epoch_auroc:\n","            print(f\"Train AUROC Improved ({best_epoch_auroc} ---> {train_epoch_auroc})\")\n","            best_epoch_auroc = train_epoch_auroc\n","            best_model_wts = copy.deepcopy(model.state_dict())\n","            PATH = \"best_AUROC_model.bin\"\n","            torch.save(model.state_dict(), PATH)\n","            # Save a model file from the current directory\n","            print(f\"Model Saved\")\n","\n","\n","\n","        print()\n","\n","    end = time.time()\n","    time_elapsed = end - start\n","    print('Training complete in {:.0f}h {:.0f}m {:.0f}s'.format(\n","        time_elapsed // 3600, (time_elapsed % 3600) // 60, (time_elapsed % 3600) % 60))\n","    print(\"Best AUROC: {:.4f}\".format(best_epoch_auroc))\n","    print(\"Best Loss: {:.4f}\".format(best_train_loss))\n","\n","    # load best model weights\n","    model.load_state_dict(best_model_wts)\n","\n","    return model, history"],"metadata":{"id":"abXIGqdHw4wg","papermill":{"duration":0.050961,"end_time":"2024-08-08T05:26:17.417074","exception":false,"start_time":"2024-08-08T05:26:17.366113","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def fetch_scheduler(optimizer):\n","    if CONFIG['scheduler'] == 'CosineAnnealingLR':\n","        scheduler = lr_scheduler.CosineAnnealingLR(optimizer,T_max=CONFIG['T_max'],\n","                                                   eta_min=CONFIG['min_lr'])\n","    elif CONFIG['scheduler'] == 'CosineAnnealingWarmRestarts':\n","        scheduler = lr_scheduler.CosineAnnealingWarmRestarts(optimizer,T_0=CONFIG['T_0'],\n","                                                             eta_min=CONFIG['min_lr'])\n","    elif CONFIG['scheduler'] == None:\n","        return None\n","\n","    return scheduler"],"metadata":{"id":"NXA3ugA5w4wl","papermill":{"duration":0.044224,"end_time":"2024-08-08T05:26:17.497711","exception":false,"start_time":"2024-08-08T05:26:17.453487","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def prepare_loaders(df, fold):\n","    df_train = df[df.kfold <= CONFIG[\"n_fold\"]].reset_index(drop=True)\n","    df_valid = df[df.kfold <= 1].reset_index(drop=True)\n","\n","#     train_dataset = ISICDataset_for_Train(df_train, transforms=data_transforms[\"train\"])\n","    train_dataset = ISICDataset(df_train, transforms=data_transforms[\"train\"])\n","    valid_dataset = ISICDataset(df_valid, transforms=data_transforms[\"valid\"])\n","\n","    train_loader = DataLoader(train_dataset, batch_size=CONFIG['train_batch_size'],\n","                              num_workers=2, shuffle=True, pin_memory=True, drop_last=True)\n","    valid_loader = DataLoader(valid_dataset, batch_size=CONFIG['valid_batch_size'],\n","                              num_workers=2, shuffle=False, pin_memory=True)\n","\n","    return train_loader, valid_loader"],"metadata":{"id":"Ryk6hWc3w4wl","papermill":{"duration":0.045278,"end_time":"2024-08-08T05:26:17.579353","exception":false,"start_time":"2024-08-08T05:26:17.534075","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 20px 20px\">Prepare Dataloader</h1></span>"],"metadata":{"id":"dLV1pSNZw4wl","papermill":{"duration":0.036243,"end_time":"2024-08-08T05:26:17.651888","exception":false,"start_time":"2024-08-08T05:26:17.615645","status":"completed"},"tags":[]}},{"cell_type":"code","source":["train_loader, valid_loader = prepare_loaders(df, fold=CONFIG[\"fold\"])"],"metadata":{"id":"cFNmeDX_w4wl","papermill":{"duration":0.049401,"end_time":"2024-08-08T05:26:17.737492","exception":false,"start_time":"2024-08-08T05:26:17.688091","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["\n","## <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 20px 20px\">Define Optimizer and Scheduler</h1></span>"],"metadata":{"id":"4z9tVPRuw4wl","papermill":{"duration":0.036075,"end_time":"2024-08-08T05:26:17.810299","exception":false,"start_time":"2024-08-08T05:26:17.774224","status":"completed"},"tags":[]}},{"cell_type":"code","source":["optimizer = optim.Adam(model.parameters(), lr=CONFIG['learning_rate'],\n","                       weight_decay=CONFIG['weight_decay'])\n","scheduler = fetch_scheduler(optimizer)"],"metadata":{"id":"eAH9ZZSjw4wl","papermill":{"duration":0.045972,"end_time":"2024-08-08T05:26:17.892749","exception":false,"start_time":"2024-08-08T05:26:17.846777","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## <span><h1 style = \"font-family: garamond; font-size: 30px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 20px 20px\">Start Training</h1></span>"],"metadata":{"id":"80JesmAnw4wl","papermill":{"duration":0.036163,"end_time":"2024-08-08T05:26:17.965128","exception":false,"start_time":"2024-08-08T05:26:17.928965","status":"completed"},"tags":[]}},{"cell_type":"code","source":["model, history = run_training(model, optimizer, scheduler,\n","                              device=CONFIG['device'],\n","                              num_epochs=CONFIG['epochs'])"],"metadata":{"id":"HgGzRq0ew4wm","papermill":{"duration":2463.394798,"end_time":"2024-08-08T06:07:21.396178","exception":false,"start_time":"2024-08-08T05:26:18.00138","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724454940862,"user_tz":-120,"elapsed":7231873,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"62b33224-4c74-4e68-ba04-37c9a4671a1f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] Using GPU: Tesla T4\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1146/1146 [11:20<00:00,  1.69it/s, Epoch=1, LR=4.81e-5, Train_Auroc=0.979, Train_Loss=0.119]\n","100%|██████████| 230/230 [01:17<00:00,  2.98it/s, Epoch=1, LR=4.81e-5, Valid_Auroc=0.00436, Valid_Loss=0.0698]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (inf ---> 0.11856883797098933)\n","Model Saved\n","Train AUROC Improved (-inf ---> 0.9785098415478057)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1146/1146 [10:56<00:00,  1.74it/s, Epoch=2, LR=4.28e-5, Train_Auroc=0.991, Train_Loss=0.083]\n","100%|██████████| 230/230 [01:13<00:00,  3.15it/s, Epoch=2, LR=4.28e-5, Valid_Auroc=0.00436, Valid_Loss=0.0521]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.11856883797098933 ---> 0.08296822862460702)\n","Model Saved\n","Train AUROC Improved (0.9785098415478057 ---> 0.9910544424406111)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1146/1146 [10:50<00:00,  1.76it/s, Epoch=3, LR=3.47e-5, Train_Auroc=0.995, Train_Loss=0.0659]\n","100%|██████████| 230/230 [01:10<00:00,  3.26it/s, Epoch=3, LR=3.47e-5, Valid_Auroc=0.00436, Valid_Loss=0.0313]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.08296822862460702 ---> 0.0659374720303189)\n","Model Saved\n","Train AUROC Improved (0.9910544424406111 ---> 0.9952657199766358)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1146/1146 [10:39<00:00,  1.79it/s, Epoch=4, LR=2.53e-5, Train_Auroc=0.997, Train_Loss=0.0527]\n","100%|██████████| 230/230 [01:12<00:00,  3.18it/s, Epoch=4, LR=2.53e-5, Valid_Auroc=0.00436, Valid_Loss=0.0276]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.0659374720303189 ---> 0.05269974295820319)\n","Model Saved\n","Train AUROC Improved (0.9952657199766358 ---> 0.9972168944820058)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1146/1146 [10:42<00:00,  1.78it/s, Epoch=5, LR=1.58e-5, Train_Auroc=0.999, Train_Loss=0.0385]\n","100%|██████████| 230/230 [01:11<00:00,  3.23it/s, Epoch=5, LR=1.58e-5, Valid_Auroc=0.00436, Valid_Loss=0.0101]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.05269974295820319 ---> 0.0384724442140556)\n","Model Saved\n","Train AUROC Improved (0.9972168944820058 ---> 0.9987618521454393)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1146/1146 [10:38<00:00,  1.80it/s, Epoch=6, LR=7.78e-6, Train_Auroc=0.998, Train_Loss=0.0291]\n","100%|██████████| 230/230 [01:11<00:00,  3.20it/s, Epoch=6, LR=7.78e-6, Valid_Auroc=0.00436, Valid_Loss=0.00729]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.0384724442140556 ---> 0.029148060782505956)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1146/1146 [10:49<00:00,  1.76it/s, Epoch=7, LR=2.4e-6, Train_Auroc=0.998, Train_Loss=0.0226]\n","100%|██████████| 230/230 [01:11<00:00,  3.23it/s, Epoch=7, LR=2.4e-6, Valid_Auroc=0.00436, Valid_Loss=0.00537]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.029148060782505956 ---> 0.02259454130308652)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1146/1146 [10:50<00:00,  1.76it/s, Epoch=8, LR=5e-7, Train_Auroc=0.999, Train_Loss=0.0186]\n","100%|██████████| 230/230 [01:12<00:00,  3.18it/s, Epoch=8, LR=5e-7, Valid_Auroc=0.00436, Valid_Loss=0.00376]\n"]},{"output_type":"stream","name":"stdout","text":["Train Loss Improved (0.02259454130308652 ---> 0.018605871072774883)\n","Model Saved\n","Train AUROC Improved (0.9987618521454393 ---> 0.9989231932450897)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1146/1146 [10:46<00:00,  1.77it/s, Epoch=9, LR=2.36e-6, Train_Auroc=1, Train_Loss=0.0199]\n","100%|██████████| 230/230 [01:11<00:00,  3.21it/s, Epoch=9, LR=2.36e-6, Valid_Auroc=0.00436, Valid_Loss=0.00406]\n"]},{"output_type":"stream","name":"stdout","text":["Train AUROC Improved (0.9989231932450897 ---> 0.999758099071305)\n","Model Saved\n","\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1146/1146 [10:40<00:00,  1.79it/s, Epoch=10, LR=7.7e-6, Train_Auroc=0.996, Train_Loss=0.0187]\n","100%|██████████| 230/230 [01:09<00:00,  3.32it/s, Epoch=10, LR=7.7e-6, Valid_Auroc=0.00436, Valid_Loss=0.0041]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Training complete in 2h 0m 32s\n","Best AUROC: 0.9998\n","Best Loss: 0.0186\n"]}]},{"cell_type":"code","source":["history = pd.DataFrame.from_dict(history)\n","history.to_csv(\"history.csv\", index=False)"],"metadata":{"id":"NltcbvKEw4wm","papermill":{"duration":3.317792,"end_time":"2024-08-08T06:07:28.052411","exception":false,"start_time":"2024-08-08T06:07:24.734619","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Logs</h1></span>"],"metadata":{"id":"PMUc0rhKw4wm","papermill":{"duration":3.370339,"end_time":"2024-08-08T06:07:34.686239","exception":false,"start_time":"2024-08-08T06:07:31.3159","status":"completed"},"tags":[]}},{"cell_type":"code","source":["plt.plot( range(history.shape[0]), history[\"Train Loss\"].values, label=\"Train Loss\")\n","plt.plot( range(history.shape[0]), history[\"Valid Loss\"].values, label=\"Valid Loss\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"Loss\")\n","plt.grid()\n","plt.legend()\n","plt.show()"],"metadata":{"id":"eKWB6zkIw4wm","papermill":{"duration":3.535561,"end_time":"2024-08-08T06:07:41.524938","exception":false,"start_time":"2024-08-08T06:07:37.989377","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1724454941259,"user_tz":-120,"elapsed":401,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"84b3139d-59c8-4305-8d8a-817d17b224ad"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.plot( range(history.shape[0]), history[\"Train AUROC\"].values, label=\"Train AUROC\")\n","plt.plot( range(history.shape[0]), history[\"Valid AUROC\"].values, label=\"Valid AUROC\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"AUROC\")\n","plt.grid()\n","plt.legend()\n","plt.show()"],"metadata":{"id":"-NuL9qi3w4wm","papermill":{"duration":3.653158,"end_time":"2024-08-08T06:07:48.462548","exception":false,"start_time":"2024-08-08T06:07:44.80939","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":449},"executionInfo":{"status":"ok","timestamp":1724454941259,"user_tz":-120,"elapsed":9,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"b27f2e38-d5bd-40e4-b04e-ef3e0e34cf3a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.plot( range(history.shape[0]), history[\"lr\"].values, label=\"lr\")\n","plt.xlabel(\"epochs\")\n","plt.ylabel(\"lr\")\n","plt.grid()\n","plt.legend()\n","plt.show()"],"metadata":{"id":"Uj5fTuJQw4wm","papermill":{"duration":3.533189,"end_time":"2024-08-08T06:07:55.348307","exception":false,"start_time":"2024-08-08T06:07:51.815118","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":465},"executionInfo":{"status":"ok","timestamp":1724454941606,"user_tz":-120,"elapsed":355,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"b5f5acd7-cf1d-4c44-cb4d-f1d109b58d2e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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iIjwTps27dq/YQCljjMqAIps586dys7OVrdu3VSmTJn8j+nTp2vXrl35z2vfvn3+f5cvX17169fXli1bJElbtmxRx44dCxy3Y8eO2rFjh9xut9auXSubzabrrrvuslmaNWuW/9+VK1eWJKWkpEiSRowYoYceekhdu3bVG2+8USAbAHOjqAAosszMTEnSnDlztHbt2vyPzZs358+pXKvQ0NCret75WzkWi0XS2fkZSRo1apQ2bdqk7t2769dff1WjRo00a9asYskHoGRRVAAUWaNGjeRwOLR//37VrVu3wEdcXFz+81asWJH/32lpadq+fbsaNmwoSWrYsKGWLl1a4LhLly5VfHy8bDabmjZtKo/HU2DmpSji4+M1fPhw/fLLL7rrrrs0derUazoegNIRZHQAAL4rIiJCTz/9tIYPHy6Px6NOnTopPT1dS5cuVWRkpGrUqCFJevnllxUdHa2KFSvq+eefV0xMjHr27ClJeuqpp9SmTRu98soruvfee7V8+XJNmDBB7777riSpZs2a6t+/vwYNGqRx48apefPm2rdvn1JSUtSrV68rZjxz5oyeeeYZ/eUvf1GtWrV08OBBJSUl6e677y6xnwuAYmT0kAwA3+bxeLzvvPOOt379+l673e6NjY313nzzzd6FCxfmD7p+//333saNG3uDg4O9iYmJ3nXr1hU4xldffeVt1KiR1263e6tXr+596623Cnz+zJkz3uHDh3srV67sDQ4O9tatW9f70Ucfeb3e/w3TpqWl5T9/zZo1XknePXv2eJ1Op7d3797euLg4b3BwsLdKlSreIUOG5A/aAjA3i9fr9RrclQD4qQULFqhLly5KS0tTVFSU0XEA+CBmVAAAgGlRVAAAgGmx9QMAAEyLMyoAAMC0KCoAAMC0KCoAAMC0KCoAAMC0KCoAAMC0KCoAAMC0KCoAAMC0KCoAAMC0KCoAAMC0/j9s3jE3x3gzEgAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["torch.save(model, path_isic_data+\"zinneke_picture.pt\")"],"metadata":{"id":"uzQ0qOv41Naa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = torch.load(path_isic_data+\"zinneke_picture.pt\")"],"metadata":{"id":"so5FR3dF1Naq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# INFERENCE THREE TEST EXAMPLES"],"metadata":{"id":"poBXfFf0PrFK","papermill":{"duration":3.270445,"end_time":"2024-08-08T06:08:01.934219","exception":false,"start_time":"2024-08-08T06:07:58.663774","status":"completed"},"tags":[]}},{"cell_type":"code","source":["test_post_dataset = ISICDataset_for_Test(subm_data, TEST_HDF, transforms=data_transforms[\"valid\"])\n","test_post_loader = DataLoader(test_post_dataset, batch_size=CONFIG['valid_batch_size'],\n","                          num_workers=2, shuffle=False, pin_memory=True)"],"metadata":{"id":"wenCNmX25tMZ","papermill":{"duration":3.327282,"end_time":"2024-08-08T06:08:08.620166","exception":false,"start_time":"2024-08-08T06:08:05.292884","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## start inference"],"metadata":{"papermill":{"duration":3.243046,"end_time":"2024-08-08T06:08:15.106851","exception":false,"start_time":"2024-08-08T06:08:11.863805","status":"completed"},"tags":[],"id":"9Jh7HiDvMQwo"}},{"cell_type":"code","source":["preds_test = []\n","with torch.no_grad():\n","    bar = tqdm(enumerate(test_post_loader), total=len(test_post_loader))\n","    for step, data in bar:\n","        images = data['image'].to(CONFIG[\"device\"], dtype=torch.float)\n","        batch_size =  images.size(0)\n","        outputs = model(images)\n","        preds_test.append( outputs.detach().cpu().numpy() )\n","preds_test = np.concatenate(preds_test).flatten()"],"metadata":{"id":"JkbMiY6fPrFV","papermill":{"duration":3.741433,"end_time":"2024-08-08T06:08:22.173626","exception":false,"start_time":"2024-08-08T06:08:18.432193","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724454943796,"user_tz":-120,"elapsed":1706,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"5e94996e-534b-4495-8ee7-29d44a33a23f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1/1 [00:01<00:00,  1.42s/it]\n"]}]},{"cell_type":"code","source":["# Assign predictions to submission DataFrame # this seems correct\n","subm_data[\"preds\"] = preds_test\n","display(subm_data.head())"],"metadata":{"id":"u_StnHmnPrFV","papermill":{"duration":3.27493,"end_time":"2024-08-08T06:08:28.717104","exception":false,"start_time":"2024-08-08T06:08:25.442174","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":332},"executionInfo":{"status":"ok","timestamp":1724454943796,"user_tz":-120,"elapsed":12,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"d9464d43-851f-459b-bce3-9453546b7f7f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["        isic_id  patient_id  age_approx     sex anatom_site_general  \\\n","0  ISIC_0015657  IP_6074337        45.0    male     posterior torso   \n","1  ISIC_0015729  IP_1664139        35.0  female     lower extremity   \n","2  ISIC_0015740  IP_7142616        65.0    male     posterior torso   \n","\n","   clin_size_long_diam_mm          image_type tbp_tile_type  tbp_lv_A  \\\n","0                    2.70  TBP tile: close-up        3D: XP  22.80433   \n","1                    2.52  TBP tile: close-up        3D: XP  16.64867   \n","2                    3.16  TBP tile: close-up        3D: XP  24.25384   \n","\n","   tbp_lv_Aext  ...  tbp_lv_stdLExt  tbp_lv_symm_2axis  \\\n","0    20.007270  ...        2.299935           0.479339   \n","1     9.657964  ...        2.011223           0.426230   \n","2    19.937380  ...        2.705857           0.366071   \n","\n","   tbp_lv_symm_2axis_angle   tbp_lv_x     tbp_lv_y    tbp_lv_z  \\\n","0                       20 -155.06510  1511.222000  113.980100   \n","1                       25 -112.36924   629.535889  -15.019287   \n","2                      110  -84.29282  1303.978000  -28.576050   \n","\n","                                         attribution  copyright_license  \\\n","0             Memorial Sloan Kettering Cancer Center              CC-BY   \n","1  Frazer Institute, The University of Queensland...              CC-BY   \n","2                                        FNQH Cairns              CC-BY   \n","\n","   target     preds  \n","0       0  0.000003  \n","1       0  0.000003  \n","2       0  0.001194  \n","\n","[3 rows x 46 columns]"],"text/html":["\n","  <div id=\"df-9e11c5b1-e26b-41a6-b789-a0446a6cbfa8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>isic_id</th>\n","      <th>patient_id</th>\n","      <th>age_approx</th>\n","      <th>sex</th>\n","      <th>anatom_site_general</th>\n","      <th>clin_size_long_diam_mm</th>\n","      <th>image_type</th>\n","      <th>tbp_tile_type</th>\n","      <th>tbp_lv_A</th>\n","      <th>tbp_lv_Aext</th>\n","      <th>...</th>\n","      <th>tbp_lv_stdLExt</th>\n","      <th>tbp_lv_symm_2axis</th>\n","      <th>tbp_lv_symm_2axis_angle</th>\n","      <th>tbp_lv_x</th>\n","      <th>tbp_lv_y</th>\n","      <th>tbp_lv_z</th>\n","      <th>attribution</th>\n","      <th>copyright_license</th>\n","      <th>target</th>\n","      <th>preds</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ISIC_0015657</td>\n","      <td>IP_6074337</td>\n","      <td>45.0</td>\n","      <td>male</td>\n","      <td>posterior torso</td>\n","      <td>2.70</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>22.80433</td>\n","      <td>20.007270</td>\n","      <td>...</td>\n","      <td>2.299935</td>\n","      <td>0.479339</td>\n","      <td>20</td>\n","      <td>-155.06510</td>\n","      <td>1511.222000</td>\n","      <td>113.980100</td>\n","      <td>Memorial Sloan Kettering Cancer Center</td>\n","      <td>CC-BY</td>\n","      <td>0</td>\n","      <td>0.000003</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ISIC_0015729</td>\n","      <td>IP_1664139</td>\n","      <td>35.0</td>\n","      <td>female</td>\n","      <td>lower extremity</td>\n","      <td>2.52</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>16.64867</td>\n","      <td>9.657964</td>\n","      <td>...</td>\n","      <td>2.011223</td>\n","      <td>0.426230</td>\n","      <td>25</td>\n","      <td>-112.36924</td>\n","      <td>629.535889</td>\n","      <td>-15.019287</td>\n","      <td>Frazer Institute, The University of Queensland...</td>\n","      <td>CC-BY</td>\n","      <td>0</td>\n","      <td>0.000003</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ISIC_0015740</td>\n","      <td>IP_7142616</td>\n","      <td>65.0</td>\n","      <td>male</td>\n","      <td>posterior torso</td>\n","      <td>3.16</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>24.25384</td>\n","      <td>19.937380</td>\n","      <td>...</td>\n","      <td>2.705857</td>\n","      <td>0.366071</td>\n","      <td>110</td>\n","      <td>-84.29282</td>\n","      <td>1303.978000</td>\n","      <td>-28.576050</td>\n","      <td>FNQH Cairns</td>\n","      <td>CC-BY</td>\n","      <td>0</td>\n","      <td>0.001194</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 46 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e11c5b1-e26b-41a6-b789-a0446a6cbfa8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9e11c5b1-e26b-41a6-b789-a0446a6cbfa8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9e11c5b1-e26b-41a6-b789-a0446a6cbfa8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8ed46714-737a-4fee-b06d-9a62d722a41f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8ed46714-737a-4fee-b06d-9a62d722a41f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8ed46714-737a-4fee-b06d-9a62d722a41f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{}}]},{"cell_type":"code","source":["subm_data.to_csv(path_isic_data+\"test_for_prediction.csv\", index=False)"],"metadata":{"id":"ENpB-RNa38N_","papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Assign predictions to submission DataFrame # this seems correct\n","subm_data[\"target\"] = preds_test\n"],"metadata":{"papermill":{"duration":3.27493,"end_time":"2024-08-08T06:08:28.717104","exception":false,"start_time":"2024-08-08T06:08:25.442174","status":"completed"},"tags":[],"trusted":true,"id":"O0tVgZoyMQwo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["subm_data = subm_data[['isic_id', 'target']]\n","subm_data.to_csv(path_isic_data+'submission.csv', index=False)\n","display(subm_data.head())"],"metadata":{"id":"H50CqlV_PrFV","papermill":{"duration":3.381316,"end_time":"2024-08-08T06:08:35.344422","exception":false,"start_time":"2024-08-08T06:08:31.963106","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"status":"ok","timestamp":1724454944034,"user_tz":-120,"elapsed":247,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"d601d9a8-f141-4443-f1a7-1ac91b40af0a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["        isic_id    target\n","0  ISIC_0015657  0.000003\n","1  ISIC_0015729  0.000003\n","2  ISIC_0015740  0.001194"],"text/html":["\n","  <div id=\"df-c9bd45aa-cba2-4fb6-a6c2-bdafa2c9b402\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>isic_id</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ISIC_0015657</td>\n","      <td>0.000003</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ISIC_0015729</td>\n","      <td>0.000003</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ISIC_0015740</td>\n","      <td>0.001194</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9bd45aa-cba2-4fb6-a6c2-bdafa2c9b402')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c9bd45aa-cba2-4fb6-a6c2-bdafa2c9b402 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c9bd45aa-cba2-4fb6-a6c2-bdafa2c9b402');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7192db51-2060-4bb2-81ac-1e6ed9fed7cd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7192db51-2060-4bb2-81ac-1e6ed9fed7cd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7192db51-2060-4bb2-81ac-1e6ed9fed7cd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(subm_data\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"isic_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"ISIC_0015657\",\n          \"ISIC_0015729\",\n          \"ISIC_0015740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3.1761285299580777e-06,\n          2.629626351335901e-06,\n          0.0011941100237891078\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":[],"metadata":{"papermill":{"duration":3.25115,"end_time":"2024-08-08T06:08:41.87827","exception":false,"start_time":"2024-08-08T06:08:38.62712","status":"completed"},"tags":[],"id":"ZIG7ySUIMQwp"}},{"cell_type":"markdown","source":["# INFERENCE 2024 TRAIN SPLIT BEST AUC"],"metadata":{"id":"B_e2WpAn-ZxF","papermill":{"duration":3.276601,"end_time":"2024-08-08T06:08:48.402352","exception":false,"start_time":"2024-08-08T06:08:45.125751","status":"completed"},"tags":[]}},{"cell_type":"code","source":["df_2024['file_path'] = df_2024['isic_id'].apply(get_train_file_path)\n","df_2024 = df_2024[df_2024[\"file_path\"].isin(train_images) ].reset_index(drop=True)\n","df_2024"],"metadata":{"id":"r_2CKesDq0dL","papermill":{"duration":4.747528,"end_time":"2024-08-08T06:08:56.521196","exception":false,"start_time":"2024-08-08T06:08:51.773668","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/","height":964},"executionInfo":{"status":"ok","timestamp":1724454946839,"user_tz":-120,"elapsed":2808,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"fd6ec8f1-2c78-400c-cc16-77ba3244b7d9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             isic_id  target  patient_id  age_approx     sex  \\\n","0       ISIC_0015670       0  IP_1235828        60.0    male   \n","1       ISIC_0015845       0  IP_8170065        60.0    male   \n","2       ISIC_0015864       0  IP_6724798        60.0    male   \n","3       ISIC_0015902       0  IP_4111386        65.0    male   \n","4       ISIC_0024200       0  IP_8313778        55.0    male   \n","...              ...     ...         ...         ...     ...   \n","401054  ISIC_9999937       0  IP_1140263        70.0    male   \n","401055  ISIC_9999951       0  IP_5678181        60.0    male   \n","401056  ISIC_9999960       0  IP_0076153        65.0  female   \n","401057  ISIC_9999964       0  IP_5231513        30.0  female   \n","401058  ISIC_9999967       0  IP_6426047        50.0    male   \n","\n","       anatom_site_general  clin_size_long_diam_mm          image_type  \\\n","0          lower extremity                    3.04  TBP tile: close-up   \n","1                head/neck                    1.10  TBP tile: close-up   \n","2          posterior torso                    3.40  TBP tile: close-up   \n","3           anterior torso                    3.22  TBP tile: close-up   \n","4           anterior torso                    2.73  TBP tile: close-up   \n","...                    ...                     ...                 ...   \n","401054      anterior torso                    6.80  TBP tile: close-up   \n","401055     posterior torso                    3.11  TBP tile: close-up   \n","401056      anterior torso                    2.05  TBP tile: close-up   \n","401057      anterior torso                    2.80  TBP tile: close-up   \n","401058     lower extremity                    3.30  TBP tile: close-up   \n","\n","       tbp_tile_type   tbp_lv_A  ...  iddx_full  iddx_1  iddx_2  iddx_3  \\\n","0          3D: white  20.244422  ...     Benign  Benign     NaN     NaN   \n","1          3D: white  31.712570  ...     Benign  Benign     NaN     NaN   \n","2             3D: XP  22.575830  ...     Benign  Benign     NaN     NaN   \n","3             3D: XP  14.242329  ...     Benign  Benign     NaN     NaN   \n","4          3D: white  24.725520  ...     Benign  Benign     NaN     NaN   \n","...              ...        ...  ...        ...     ...     ...     ...   \n","401054        3D: XP  22.574335  ...     Benign  Benign     NaN     NaN   \n","401055     3D: white  19.977640  ...     Benign  Benign     NaN     NaN   \n","401056        3D: XP  17.332567  ...     Benign  Benign     NaN     NaN   \n","401057        3D: XP  22.288570  ...     Benign  Benign     NaN     NaN   \n","401058        3D: XP  16.792900  ...     Benign  Benign     NaN     NaN   \n","\n","        iddx_4  iddx_5  mel_mitotic_index  mel_thick_mm  \\\n","0          NaN     NaN                NaN           NaN   \n","1          NaN     NaN                NaN           NaN   \n","2          NaN     NaN                NaN           NaN   \n","3          NaN     NaN                NaN           NaN   \n","4          NaN     NaN                NaN           NaN   \n","...        ...     ...                ...           ...   \n","401054     NaN     NaN                NaN           NaN   \n","401055     NaN     NaN                NaN           NaN   \n","401056     NaN     NaN                NaN           NaN   \n","401057     NaN     NaN                NaN           NaN   \n","401058     NaN     NaN                NaN           NaN   \n","\n","        tbp_lv_dnn_lesion_confidence  \\\n","0                          97.517282   \n","1                           3.141455   \n","2                          99.804040   \n","3                          99.989998   \n","4                          70.442510   \n","...                              ...   \n","401054                     99.999988   \n","401055                     99.999820   \n","401056                     99.999416   \n","401057                    100.000000   \n","401058                     99.999960   \n","\n","                                                file_path  \n","0       /kaggle/input/isic-2024-challenge/train-image/...  \n","1       /kaggle/input/isic-2024-challenge/train-image/...  \n","2       /kaggle/input/isic-2024-challenge/train-image/...  \n","3       /kaggle/input/isic-2024-challenge/train-image/...  \n","4       /kaggle/input/isic-2024-challenge/train-image/...  \n","...                                                   ...  \n","401054  /kaggle/input/isic-2024-challenge/train-image/...  \n","401055  /kaggle/input/isic-2024-challenge/train-image/...  \n","401056  /kaggle/input/isic-2024-challenge/train-image/...  \n","401057  /kaggle/input/isic-2024-challenge/train-image/...  \n","401058  /kaggle/input/isic-2024-challenge/train-image/...  \n","\n","[401059 rows x 56 columns]"],"text/html":["\n","  <div id=\"df-8ce8bf48-605d-4145-baf5-077b57995577\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>isic_id</th>\n","      <th>target</th>\n","      <th>patient_id</th>\n","      <th>age_approx</th>\n","      <th>sex</th>\n","      <th>anatom_site_general</th>\n","      <th>clin_size_long_diam_mm</th>\n","      <th>image_type</th>\n","      <th>tbp_tile_type</th>\n","      <th>tbp_lv_A</th>\n","      <th>...</th>\n","      <th>iddx_full</th>\n","      <th>iddx_1</th>\n","      <th>iddx_2</th>\n","      <th>iddx_3</th>\n","      <th>iddx_4</th>\n","      <th>iddx_5</th>\n","      <th>mel_mitotic_index</th>\n","      <th>mel_thick_mm</th>\n","      <th>tbp_lv_dnn_lesion_confidence</th>\n","      <th>file_path</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ISIC_0015670</td>\n","      <td>0</td>\n","      <td>IP_1235828</td>\n","      <td>60.0</td>\n","      <td>male</td>\n","      <td>lower extremity</td>\n","      <td>3.04</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: white</td>\n","      <td>20.244422</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>97.517282</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ISIC_0015845</td>\n","      <td>0</td>\n","      <td>IP_8170065</td>\n","      <td>60.0</td>\n","      <td>male</td>\n","      <td>head/neck</td>\n","      <td>1.10</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: white</td>\n","      <td>31.712570</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>3.141455</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ISIC_0015864</td>\n","      <td>0</td>\n","      <td>IP_6724798</td>\n","      <td>60.0</td>\n","      <td>male</td>\n","      <td>posterior torso</td>\n","      <td>3.40</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>22.575830</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>99.804040</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ISIC_0015902</td>\n","      <td>0</td>\n","      <td>IP_4111386</td>\n","      <td>65.0</td>\n","      <td>male</td>\n","      <td>anterior torso</td>\n","      <td>3.22</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>14.242329</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>99.989998</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ISIC_0024200</td>\n","      <td>0</td>\n","      <td>IP_8313778</td>\n","      <td>55.0</td>\n","      <td>male</td>\n","      <td>anterior torso</td>\n","      <td>2.73</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: white</td>\n","      <td>24.725520</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>70.442510</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>401054</th>\n","      <td>ISIC_9999937</td>\n","      <td>0</td>\n","      <td>IP_1140263</td>\n","      <td>70.0</td>\n","      <td>male</td>\n","      <td>anterior torso</td>\n","      <td>6.80</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>22.574335</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>99.999988</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>401055</th>\n","      <td>ISIC_9999951</td>\n","      <td>0</td>\n","      <td>IP_5678181</td>\n","      <td>60.0</td>\n","      <td>male</td>\n","      <td>posterior torso</td>\n","      <td>3.11</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: white</td>\n","      <td>19.977640</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>99.999820</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>401056</th>\n","      <td>ISIC_9999960</td>\n","      <td>0</td>\n","      <td>IP_0076153</td>\n","      <td>65.0</td>\n","      <td>female</td>\n","      <td>anterior torso</td>\n","      <td>2.05</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>17.332567</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>99.999416</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>401057</th>\n","      <td>ISIC_9999964</td>\n","      <td>0</td>\n","      <td>IP_5231513</td>\n","      <td>30.0</td>\n","      <td>female</td>\n","      <td>anterior torso</td>\n","      <td>2.80</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>22.288570</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>100.000000</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","    <tr>\n","      <th>401058</th>\n","      <td>ISIC_9999967</td>\n","      <td>0</td>\n","      <td>IP_6426047</td>\n","      <td>50.0</td>\n","      <td>male</td>\n","      <td>lower extremity</td>\n","      <td>3.30</td>\n","      <td>TBP tile: close-up</td>\n","      <td>3D: XP</td>\n","      <td>16.792900</td>\n","      <td>...</td>\n","      <td>Benign</td>\n","      <td>Benign</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>99.999960</td>\n","      <td>/kaggle/input/isic-2024-challenge/train-image/...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>401059 rows × 56 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8ce8bf48-605d-4145-baf5-077b57995577')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8ce8bf48-605d-4145-baf5-077b57995577 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8ce8bf48-605d-4145-baf5-077b57995577');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ec262e51-a378-4fd8-a563-d57dd62ea96c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ec262e51-a378-4fd8-a563-d57dd62ea96c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ec262e51-a378-4fd8-a563-d57dd62ea96c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d1f16fc9-19e8-46e0-b0a8-c435c381d4d7\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2024')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d1f16fc9-19e8-46e0-b0a8-c435c381d4d7 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_2024');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_2024"}},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["df_2024.to_csv(path_isic_data+\"df_2024_for prediction.csv\", index=False) # this is not usefull"],"metadata":{"papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"trusted":true,"id":"9CI3rNrWMQwp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_post_dataset = ISICDataset(df_2024, transforms=data_transforms[\"valid\"])\n","train_post_loader = DataLoader(train_post_dataset, batch_size=CONFIG['valid_batch_size'],\n","                          num_workers=2, shuffle=False, pin_memory=True)"],"metadata":{"papermill":{"duration":3.299116,"end_time":"2024-08-08T06:09:03.087075","exception":false,"start_time":"2024-08-08T06:08:59.787959","status":"completed"},"tags":[],"trusted":true,"id":"Pkjv1FTvMQwp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["preds_train = []\n","with torch.no_grad():\n","    bar = tqdm(enumerate(train_post_loader), total=len(train_post_loader))\n","    for step, data in bar:\n","        images = data['image'].to(CONFIG[\"device\"], dtype=torch.float)\n","        batch_size = images.size(0)\n","        outputs = model(images)\n","        preds_train.append( outputs.detach().cpu().numpy() )\n","preds_train = np.concatenate(preds_train).flatten()"],"metadata":{"id":"zoaBJPPY5tMZ","papermill":{"duration":1244.119438,"end_time":"2024-08-08T06:29:50.473085","exception":false,"start_time":"2024-08-08T06:09:06.353647","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724456890002,"user_tz":-120,"elapsed":1923290,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"c5071c05-2746-4346-9c88-823ce39e66b8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 6267/6267 [32:03<00:00,  3.26it/s]\n"]}]},{"cell_type":"code","source":["df_2024[\"preds\"] = preds_train\n"],"metadata":{"id":"wx53HJML5tMZ","papermill":{"duration":3.596489,"end_time":"2024-08-08T06:29:57.646601","exception":false,"start_time":"2024-08-08T06:29:54.050112","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["### df_2024.to_csv(\"my-mix-image-.csv\", index=False) # not used here and too large"],"metadata":{"papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"id":"swAmREoXMQwp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"-Gz4_1CjMQwq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_2024[['isic_id', 'target', 'preds']].to_csv(path_isic_data+\"df_2024_after prediction.csv\", index=False)"],"metadata":{"papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"trusted":true,"id":"jsWvay5s49fy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_loss = torch.load(path_isic_data+\"zinneke_picture\")\n","PATH = \"best_TRAIN_LOSS_model.bin\"\n","model_loss.load_state_dict(torch.load(PATH))\n","model_loss.eval()\n","torch.save(model_loss, path_isic_data+\"zinneke_picture_loss.pt\")"],"metadata":{"id":"vAo4UVa61Vab"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# INFERENCE 2024 TRAIN SPLIT BEST LOSS"],"metadata":{"papermill":{"duration":3.276601,"end_time":"2024-08-08T06:08:48.402352","exception":false,"start_time":"2024-08-08T06:08:45.125751","status":"completed"},"tags":[],"id":"qOHY1RdMKn3H"}},{"cell_type":"code","source":["model_loss = torch.load(path_isic_data+\"zinneke_picture\")\n","PATH = \"best_TRAIN_LOSS_model.bin\"\n","model_loss.load_state_dict(torch.load(PATH))\n","model_loss.eval()\n","torch.save(model_loss, path_isic_data+\"zinneke_picture_loss.pt\")"],"metadata":{"id":"YxIgN_VMKn3K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_2024 = pd.read_csv(path_isic_data+\"df_2024_for prediction.csv\")"],"metadata":{"papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"trusted":true,"id":"bxTQgSTdKn3I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_post_dataset = ISICDataset(df_2024, transforms=data_transforms[\"valid\"])\n","train_post_loader = DataLoader(train_post_dataset, batch_size=CONFIG['valid_batch_size'],\n","                          num_workers=2, shuffle=False, pin_memory=True)"],"metadata":{"papermill":{"duration":3.299116,"end_time":"2024-08-08T06:09:03.087075","exception":false,"start_time":"2024-08-08T06:08:59.787959","status":"completed"},"tags":[],"trusted":true,"id":"V5dp1PXPKn3J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["preds_train = []\n","with torch.no_grad():\n","    bar = tqdm(enumerate(train_post_loader), total=len(train_post_loader))\n","    for step, data in bar:\n","        images = data['image'].to(CONFIG[\"device\"], dtype=torch.float)\n","        batch_size = images.size(0)\n","        outputs = model_loss(images)\n","        preds_train.append( outputs.detach().cpu().numpy() )\n","preds_train = np.concatenate(preds_train).flatten()"],"metadata":{"papermill":{"duration":1244.119438,"end_time":"2024-08-08T06:29:50.473085","exception":false,"start_time":"2024-08-08T06:09:06.353647","status":"completed"},"tags":[],"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"yi3Qd2XMKn3J","executionInfo":{"status":"ok","timestamp":1724458851947,"user_tz":-120,"elapsed":1951467,"user":{"displayName":"Pierre Decoodt","userId":"11089793044290653285"}},"outputId":"20b7c08b-ee24-43ff-c0cd-741d85be6e5d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 6267/6267 [32:31<00:00,  3.21it/s]\n"]}]},{"cell_type":"code","source":["df_2024[\"preds\"] = preds_train\n"],"metadata":{"papermill":{"duration":3.596489,"end_time":"2024-08-08T06:29:57.646601","exception":false,"start_time":"2024-08-08T06:29:54.050112","status":"completed"},"tags":[],"trusted":true,"id":"ZzjganrcKn3J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["### df_2024.to_csv(\"my-mix-image-.csv\", index=False) # not used here and too large"],"metadata":{"papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"id":"pUL9NsECKn3J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Esu11yA2Kn3K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_2024[['isic_id', 'target', 'preds']].to_csv(path_isic_data+\"df_2024_after prediction best loss.csv\", index=False)"],"metadata":{"papermill":{"duration":4.770597,"end_time":"2024-08-08T06:30:05.983588","exception":false,"start_time":"2024-08-08T06:30:01.212991","status":"completed"},"tags":[],"trusted":true,"id":"DvZxjZOBKn3K"},"execution_count":null,"outputs":[]}]}